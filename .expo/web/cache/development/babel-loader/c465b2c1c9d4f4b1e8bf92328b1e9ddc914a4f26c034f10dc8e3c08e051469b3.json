{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.PATTERNS = void 0;\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\nvar _TextExtraction = _interopRequireDefault(require(\"./lib/TextExtraction\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _jsxFileName = \"C:\\\\Users\\\\erick_ribeiro-souza\\\\Desktop\\\\s.a 2\\\\sa.ReactNative2semestre-1\\\\node_modules\\\\react-native-parsed-text\\\\src\\\\ParsedText.js\";\nvar _excluded = [\"type\"],\n  _excluded2 = [\"style\"],\n  _excluded3 = [\"parse\", \"childrenProps\"];\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nvar PATTERNS = exports.PATTERNS = {\n  url: /(https?:\\/\\/|www\\.)[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.(xn--)?[a-z0-9-]{2,20}\\b([-a-zA-Z0-9@:%_\\+\\[\\],.~#?&\\/=]*[-a-zA-Z0-9@:%_\\+\\]~#?&\\/=])*/i,\n  phone: /[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,7}/,\n  email: /\\S+@\\S+\\.\\S+/\n};\nvar defaultParseShape = _propTypes.default.shape(Object.assign({}, _reactNative.Text.propTypes, {\n  type: _propTypes.default.oneOf(Object.keys(PATTERNS)).isRequired,\n  nonExhaustiveMaxMatchCount: _propTypes.default.number\n}));\nvar customParseShape = _propTypes.default.shape(Object.assign({}, _reactNative.Text.propTypes, {\n  pattern: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.instanceOf(RegExp)]).isRequired,\n  nonExhaustiveMaxMatchCount: _propTypes.default.number\n}));\nvar ParsedText = function (_React$Component) {\n  (0, _inherits2.default)(ParsedText, _React$Component);\n  var _super = _createSuper(ParsedText);\n  function ParsedText() {\n    (0, _classCallCheck2.default)(this, ParsedText);\n    return _super.apply(this, arguments);\n  }\n  (0, _createClass2.default)(ParsedText, [{\n    key: \"setNativeProps\",\n    value: function setNativeProps(nativeProps) {\n      this._root.setNativeProps(nativeProps);\n    }\n  }, {\n    key: \"getPatterns\",\n    value: function getPatterns() {\n      return this.props.parse.map(function (option) {\n        var type = option.type,\n          patternOption = (0, _objectWithoutProperties2.default)(option, _excluded);\n        if (type) {\n          if (!PATTERNS[type]) {\n            throw new Error(option.type + \" is not a supported type\");\n          }\n          patternOption.pattern = PATTERNS[type];\n        }\n        return patternOption;\n      });\n    }\n  }, {\n    key: \"getParsedText\",\n    value: function getParsedText() {\n      var _this = this;\n      if (!this.props.parse) {\n        return this.props.children;\n      }\n      if (typeof this.props.children !== 'string') {\n        return this.props.children;\n      }\n      var textExtraction = new _TextExtraction.default(this.props.children, this.getPatterns());\n      return textExtraction.parse().map(function (props, index) {\n        var parentStyle = _this.props.style;\n        var style = props.style,\n          remainder = (0, _objectWithoutProperties2.default)(props, _excluded2);\n        return (0, _jsxRuntime.jsx)(_reactNative.Text, Object.assign({\n          style: [parentStyle, style]\n        }, _this.props.childrenProps, remainder), \"parsedText-\" + index);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$props = Object.assign({}, this.props),\n        parse = _this$props.parse,\n        childrenProps = _this$props.childrenProps,\n        remainder = (0, _objectWithoutProperties2.default)(_this$props, _excluded3);\n      return (0, _jsxRuntime.jsx)(_reactNative.Text, Object.assign({\n        ref: function ref(_ref) {\n          return _this2._root = _ref;\n        }\n      }, remainder, {\n        children: this.getParsedText()\n      }));\n    }\n  }]);\n  return ParsedText;\n}(_react.default.Component);\nParsedText.displayName = 'ParsedText';\nParsedText.propTypes = Object.assign({}, _reactNative.Text.propTypes, {\n  parse: _propTypes.default.arrayOf(_propTypes.default.oneOfType([defaultParseShape, customParseShape])),\n  childrenProps: _propTypes.default.shape(_reactNative.Text.propTypes)\n});\nParsedText.defaultProps = {\n  parse: null,\n  childrenProps: {}\n};\nvar _default = exports.default = ParsedText;","map":{"version":3,"names":["_react","_interopRequireDefault","require","_reactNative","_propTypes","_TextExtraction","_jsxRuntime","_jsxFileName","_excluded","_excluded2","_excluded3","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","default","result","NewTarget","constructor","Reflect","construct","arguments","apply","_possibleConstructorReturn2","sham","Proxy","Boolean","prototype","valueOf","call","e","PATTERNS","exports","url","phone","email","defaultParseShape","PropTypes","shape","Object","assign","Text","propTypes","type","oneOf","keys","isRequired","nonExhaustiveMaxMatchCount","number","customParseShape","pattern","oneOfType","string","instanceOf","RegExp","ParsedText","_React$Component","_inherits2","_super","_classCallCheck2","_createClass2","key","value","setNativeProps","nativeProps","_root","getPatterns","props","parse","map","option","patternOption","_objectWithoutProperties2","Error","getParsedText","_this","children","textExtraction","TextExtraction","index","parentStyle","style","remainder","jsx","childrenProps","render","_this2","_this$props","ref","React","Component","displayName","arrayOf","defaultProps","_default"],"sources":["C:/Users/erick_ribeiro-souza/Desktop/s.a 2/sa.ReactNative2semestre-1/node_modules/react-native-parsed-text/src/ParsedText.js"],"sourcesContent":["import React from 'react';\nimport { Text } from 'react-native';\nimport PropTypes from 'prop-types';\n\nimport TextExtraction from './lib/TextExtraction';\n\n/**\n * This is a list of the known patterns that are provided by this library\n * @typedef {('url'|'phone'|'email')} KnownParsePattern\n */\n/**\n * @type {Object.<string, RegExp>}\n * // The keys really should be KnownParsePattern -- but this is unsupported in jsdoc, sadly\n */\nexport const PATTERNS = {\n  /**\n   * Segments/Features:\n   *  - http/https support https?\n   *  - auto-detecting loose domains if preceded by `www.`\n   *  - Localized & Long top-level domains \\.(xn--)?[a-z0-9-]{2,20}\\b\n   *  - Allowed query parameters & values, it's two blocks of matchers\n   *    ([-a-zA-Z0-9@:%_\\+,.~#?&\\/=]*[-a-zA-Z0-9@:%_\\+~#?&\\/=])*\n   *    - First block is [-a-zA-Z0-9@:%_\\+\\[\\],.~#?&\\/=]* -- this matches parameter names & values (including commas, dots, opening & closing brackets)\n   *    - The first block must be followed by a closing block [-a-zA-Z0-9@:%_\\+\\]~#?&\\/=] -- this doesn't match commas, dots, and opening brackets\n   */\n  url: /(https?:\\/\\/|www\\.)[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.(xn--)?[a-z0-9-]{2,20}\\b([-a-zA-Z0-9@:%_\\+\\[\\],.~#?&\\/=]*[-a-zA-Z0-9@:%_\\+\\]~#?&\\/=])*/i,\n  phone: /[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,7}/,\n  email: /\\S+@\\S+\\.\\S+/,\n};\n\n/**\n * This is for built-in-patterns already supported by this library\n * Note: any additional keys/props are permitted, and will be passed along as props to the <Text> component!\n * @typedef {Object} DefaultParseShape\n * @property {KnownParsePattern} [type] key of the known pattern you'd like to configure\n * @property {number} [nonExhaustiveModeMaxMatchCount] Enables \"non-exhaustive mode\", where you can limit how many matches are found. -- Must be a positive integer or Infinity matches are permitted\n * @property {Function} [renderText] arbitrary function to rewrite the matched string into something else\n * @property {Function} [onPress]\n * @property {Function} [onLongPress]\n */\nconst defaultParseShape = PropTypes.shape({\n  ...Text.propTypes,\n  type: PropTypes.oneOf(Object.keys(PATTERNS)).isRequired,\n  nonExhaustiveMaxMatchCount: PropTypes.number,\n});\n\nconst customParseShape = PropTypes.shape({\n  ...Text.propTypes,\n  pattern: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(RegExp)])\n    .isRequired,\n  nonExhaustiveMaxMatchCount: PropTypes.number,\n});\n\n/**\n * The props added by this component\n * @typedef {DefaultParseShape|import('./lib/TextExtraction').CustomParseShape} ParsedTextAddedProps\n * @property {ParseShape[]} parse\n * @property {import('react-native').TextProps} childrenProps -- the props set on each child Text component\n */\n/** @typedef {ParsedTextAddedProps & import('react-native').TextProps} ParsedTextProps */\n\n/** @type {import('react').ComponentClass<ParsedTextProps>} */\nclass ParsedText extends React.Component {\n  static displayName = 'ParsedText';\n\n  static propTypes = {\n    ...Text.propTypes,\n    parse: PropTypes.arrayOf(\n      PropTypes.oneOfType([defaultParseShape, customParseShape]),\n    ),\n    childrenProps: PropTypes.shape(Text.propTypes),\n  };\n\n  static defaultProps = {\n    parse: null,\n    childrenProps: {},\n  };\n\n  setNativeProps(nativeProps) {\n    this._root.setNativeProps(nativeProps);\n  }\n  /** @returns {import('./lib/TextExtraction').CustomParseShape[]} */\n  getPatterns() {\n    return this.props.parse.map((option) => {\n      const { type, ...patternOption } = option;\n      if (type) {\n        if (!PATTERNS[type]) {\n          throw new Error(`${option.type} is not a supported type`);\n        }\n        patternOption.pattern = PATTERNS[type];\n      }\n\n      return patternOption;\n    });\n  }\n\n  getParsedText() {\n    if (!this.props.parse) {\n      return this.props.children;\n    }\n    if (typeof this.props.children !== 'string') {\n      return this.props.children;\n    }\n\n    const textExtraction = new TextExtraction(\n      this.props.children,\n      this.getPatterns(),\n    );\n\n    return textExtraction.parse().map((props, index) => {\n      const { style: parentStyle } = this.props;\n      const { style, ...remainder } = props;\n      return (\n        <Text\n          key={`parsedText-${index}`}\n          style={[parentStyle, style]}\n          {...this.props.childrenProps}\n          {...remainder}\n        />\n      );\n    });\n  }\n\n  render() {\n    // Discard custom props before passing remainder to Text\n    const { parse, childrenProps, ...remainder } = { ...this.props };\n\n    return (\n      <Text ref={(ref) => (this._root = ref)} {...remainder}>\n        {this.getParsedText()}\n      </Text>\n    );\n  }\n}\n\nexport default ParsedText;\n"],"mappings":";;;;;;;;;;;AAAA,IAAAA,MAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,YAAA,GAAAD,OAAA;AACA,IAAAE,UAAA,GAAAH,sBAAA,CAAAC,OAAA;AAEA,IAAAG,eAAA,GAAAJ,sBAAA,CAAAC,OAAA;AAAkD,IAAAI,WAAA,GAAAJ,OAAA;AAAA,IAAAK,YAAA;AAAA,IAAAC,SAAA;EAAAC,UAAA;EAAAC,UAAA;AAAA,SAAAC,aAAAC,OAAA,QAAAC,yBAAA,GAAAC,yBAAA,oBAAAC,qBAAA,QAAAC,KAAA,OAAAC,gBAAA,CAAAC,OAAA,EAAAN,OAAA,GAAAO,MAAA,MAAAN,yBAAA,QAAAO,SAAA,OAAAH,gBAAA,CAAAC,OAAA,QAAAG,WAAA,EAAAF,MAAA,GAAAG,OAAA,CAAAC,SAAA,CAAAP,KAAA,EAAAQ,SAAA,EAAAJ,SAAA,YAAAD,MAAA,GAAAH,KAAA,CAAAS,KAAA,OAAAD,SAAA,gBAAAE,2BAAA,CAAAR,OAAA,QAAAC,MAAA;AAAA,SAAAL,0BAAA,eAAAQ,OAAA,qBAAAA,OAAA,CAAAC,SAAA,oBAAAD,OAAA,CAAAC,SAAA,CAAAI,IAAA,2BAAAC,KAAA,oCAAAC,OAAA,CAAAC,SAAA,CAAAC,OAAA,CAAAC,IAAA,CAAAV,OAAA,CAAAC,SAAA,CAAAM,OAAA,8CAAAI,CAAA;AAU3C,IAAMC,QAAQ,GAAAC,OAAA,CAAAD,QAAA,GAAG;EAWtBE,GAAG,EAAE,2IAA2I;EAChJC,KAAK,EAAE,yDAAyD;EAChEC,KAAK,EAAE;AACT,CAAC;AAYD,IAAMC,iBAAiB,GAAGC,kBAAS,CAACC,KAAK,CAAAC,MAAA,CAAAC,MAAA,KACpCC,iBAAI,CAACC,SAAS;EACjBC,IAAI,EAAEN,kBAAS,CAACO,KAAK,CAACL,MAAM,CAACM,IAAI,CAACd,QAAQ,CAAC,CAAC,CAACe,UAAU;EACvDC,0BAA0B,EAAEV,kBAAS,CAACW;AAAM,EAC7C,CAAC;AAEF,IAAMC,gBAAgB,GAAGZ,kBAAS,CAACC,KAAK,CAAAC,MAAA,CAAAC,MAAA,KACnCC,iBAAI,CAACC,SAAS;EACjBQ,OAAO,EAAEb,kBAAS,CAACc,SAAS,CAAC,CAACd,kBAAS,CAACe,MAAM,EAAEf,kBAAS,CAACgB,UAAU,CAACC,MAAM,CAAC,CAAC,CAAC,CAC3ER,UAAU;EACbC,0BAA0B,EAAEV,kBAAS,CAACW;AAAM,EAC7C,CAAC;AAAC,IAWGO,UAAU,aAAAC,gBAAA;EAAA,IAAAC,UAAA,CAAA1C,OAAA,EAAAwC,UAAA,EAAAC,gBAAA;EAAA,IAAAE,MAAA,GAAAlD,YAAA,CAAA+C,UAAA;EAAA,SAAAA,WAAA;IAAA,IAAAI,gBAAA,CAAA5C,OAAA,QAAAwC,UAAA;IAAA,OAAAG,MAAA,CAAApC,KAAA,OAAAD,SAAA;EAAA;EAAA,IAAAuC,aAAA,CAAA7C,OAAA,EAAAwC,UAAA;IAAAM,GAAA;IAAAC,KAAA,EAgBd,SAAAC,eAAeC,WAAW,EAAE;MAC1B,IAAI,CAACC,KAAK,CAACF,cAAc,CAACC,WAAW,CAAC;IACxC;EAAC;IAAAH,GAAA;IAAAC,KAAA,EAED,SAAAI,YAAA,EAAc;MACZ,OAAO,IAAI,CAACC,KAAK,CAACC,KAAK,CAACC,GAAG,CAAC,UAACC,MAAM,EAAK;QACtC,IAAQ3B,IAAI,GAAuB2B,MAAM,CAAjC3B,IAAI;UAAK4B,aAAa,OAAAC,yBAAA,CAAAzD,OAAA,EAAKuD,MAAM,EAAAjE,SAAA;QACzC,IAAIsC,IAAI,EAAE;UACR,IAAI,CAACZ,QAAQ,CAACY,IAAI,CAAC,EAAE;YACnB,MAAM,IAAI8B,KAAK,CAAIH,MAAM,CAAC3B,IAAI,6BAA0B,CAAC;UAC3D;UACA4B,aAAa,CAACrB,OAAO,GAAGnB,QAAQ,CAACY,IAAI,CAAC;QACxC;QAEA,OAAO4B,aAAa;MACtB,CAAC,CAAC;IACJ;EAAC;IAAAV,GAAA;IAAAC,KAAA,EAED,SAAAY,cAAA,EAAgB;MAAA,IAAAC,KAAA;MACd,IAAI,CAAC,IAAI,CAACR,KAAK,CAACC,KAAK,EAAE;QACrB,OAAO,IAAI,CAACD,KAAK,CAACS,QAAQ;MAC5B;MACA,IAAI,OAAO,IAAI,CAACT,KAAK,CAACS,QAAQ,KAAK,QAAQ,EAAE;QAC3C,OAAO,IAAI,CAACT,KAAK,CAACS,QAAQ;MAC5B;MAEA,IAAMC,cAAc,GAAG,IAAIC,uBAAc,CACvC,IAAI,CAACX,KAAK,CAACS,QAAQ,EACnB,IAAI,CAACV,WAAW,CAAC,CACnB,CAAC;MAED,OAAOW,cAAc,CAACT,KAAK,CAAC,CAAC,CAACC,GAAG,CAAC,UAACF,KAAK,EAAEY,KAAK,EAAK;QAClD,IAAeC,WAAW,GAAKL,KAAI,CAACR,KAAK,CAAjCc,KAAK;QACb,IAAQA,KAAK,GAAmBd,KAAK,CAA7Bc,KAAK;UAAKC,SAAS,OAAAV,yBAAA,CAAAzD,OAAA,EAAKoD,KAAK,EAAA7D,UAAA;QACrC,OACE,IAAAH,WAAA,CAAAgF,GAAA,EAACnF,YAAA,CAAAyC,IAAI,EAAAF,MAAA,CAAAC,MAAA;UAEHyC,KAAK,EAAE,CAACD,WAAW,EAAEC,KAAK;QAAE,GACxBN,KAAI,CAACR,KAAK,CAACiB,aAAa,EACxBF,SAAS,mBAHMH,KAIpB,CAAC;MAEN,CAAC,CAAC;IACJ;EAAC;IAAAlB,GAAA;IAAAC,KAAA,EAED,SAAAuB,OAAA,EAAS;MAAA,IAAAC,MAAA;MAEP,IAAAC,WAAA,GAAAhD,MAAA,CAAAC,MAAA,KAAoD,IAAI,CAAC2B,KAAK;QAAtDC,KAAK,GAAAmB,WAAA,CAALnB,KAAK;QAAEgB,aAAa,GAAAG,WAAA,CAAbH,aAAa;QAAKF,SAAS,OAAAV,yBAAA,CAAAzD,OAAA,EAAAwE,WAAA,EAAAhF,UAAA;MAE1C,OACE,IAAAJ,WAAA,CAAAgF,GAAA,EAACnF,YAAA,CAAAyC,IAAI,EAAAF,MAAA,CAAAC,MAAA;QAACgD,GAAG,EAAE,SAAAA,IAACA,IAAG;UAAA,OAAMF,MAAI,CAACrB,KAAK,GAAGuB,IAAG;QAAA;MAAE,GAAKN,SAAS;QAAAN,QAAA,EAClD,IAAI,CAACF,aAAa,CAAC;MAAC,EACjB,CAAC;IAEX;EAAC;EAAA,OAAAnB,UAAA;AAAA,EAtEsBkC,cAAK,CAACC,SAAS;AAAlCnC,UAAU,CACPoC,WAAW,GAAG,YAAY;AAD7BpC,UAAU,CAGPb,SAAS,GAAAH,MAAA,CAAAC,MAAA,KACXC,iBAAI,CAACC,SAAS;EACjB0B,KAAK,EAAE/B,kBAAS,CAACuD,OAAO,CACtBvD,kBAAS,CAACc,SAAS,CAAC,CAACf,iBAAiB,EAAEa,gBAAgB,CAAC,CAC3D,CAAC;EACDmC,aAAa,EAAE/C,kBAAS,CAACC,KAAK,CAACG,iBAAI,CAACC,SAAS;AAAC;AAR5Ca,UAAU,CAWPsC,YAAY,GAAG;EACpBzB,KAAK,EAAE,IAAI;EACXgB,aAAa,EAAE,CAAC;AAClB,CAAC;AAAA,IAAAU,QAAA,GAAA9D,OAAA,CAAAjB,OAAA,GA2DYwC,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}