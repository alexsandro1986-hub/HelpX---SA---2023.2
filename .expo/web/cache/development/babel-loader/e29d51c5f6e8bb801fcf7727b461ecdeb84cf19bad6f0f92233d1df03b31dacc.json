{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"FontDisplay\", {\n  enumerable: true,\n  get: function get() {\n    return _Font.FontDisplay;\n  }\n});\nexports.isLoaded = isLoaded;\nexports.isLoading = isLoading;\nexports.loadAsync = loadAsync;\nexports.processFontFamily = processFontFamily;\nexports.unloadAllAsync = unloadAllAsync;\nexports.unloadAsync = unloadAsync;\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\nvar _expoModulesCore = require(\"expo-modules-core\");\nvar _ExpoFontLoader = _interopRequireDefault(require(\"./ExpoFontLoader\"));\nvar _Font = require(\"./Font.types\");\nvar _FontLoader = require(\"./FontLoader\");\nvar _memory = require(\"./memory\");\nvar _server = require(\"./server\");\nfunction processFontFamily(fontFamily) {\n  if (!fontFamily || !(0, _FontLoader.fontFamilyNeedsScoping)(fontFamily)) {\n    return fontFamily;\n  }\n  if (!isLoaded(fontFamily)) {\n    if (__DEV__) {\n      if (isLoading(fontFamily)) {\n        console.warn(\"You started loading the font \\\"\" + fontFamily + \"\\\", but used it before it finished loading. You need to wait for Font.loadAsync to complete before using the font.\");\n      } else {\n        console.warn(\"fontFamily \\\"\" + fontFamily + \"\\\" is not a system font and has not been loaded through expo-font.\");\n      }\n    }\n  }\n  return \"ExpoFont-\" + (0, _FontLoader.getNativeFontName)(fontFamily);\n}\nfunction isLoaded(fontFamily) {\n  if (_expoModulesCore.Platform.OS === 'web') {\n    return fontFamily in _memory.loaded || !!_ExpoFontLoader.default.isLoaded(fontFamily);\n  }\n  return fontFamily in _memory.loaded;\n}\nfunction isLoading(fontFamily) {\n  return fontFamily in _memory.loadPromises;\n}\nfunction loadAsync(fontFamilyOrFontMap, source) {\n  var isServer = _expoModulesCore.Platform.OS === 'web' && typeof window === 'undefined';\n  if (typeof fontFamilyOrFontMap === 'object') {\n    if (source) {\n      return Promise.reject(new _expoModulesCore.CodedError(\"ERR_FONT_API\", \"No fontFamily can be used for the provided source: \" + source + \". The second argument of `loadAsync()` can only be used with a `string` value as the first argument.\"));\n    }\n    var fontMap = fontFamilyOrFontMap;\n    var names = Object.keys(fontMap);\n    if (isServer) {\n      names.map(function (name) {\n        return (0, _server.registerStaticFont)(name, fontMap[name]);\n      });\n      return Promise.resolve();\n    }\n    return Promise.all(names.map(function (name) {\n      return loadFontInNamespaceAsync(name, fontMap[name]);\n    })).then(function () {});\n  }\n  if (isServer) {\n    (0, _server.registerStaticFont)(fontFamilyOrFontMap, source);\n    return Promise.resolve();\n  }\n  return loadFontInNamespaceAsync(fontFamilyOrFontMap, source);\n}\nfunction loadFontInNamespaceAsync(_x, _x2) {\n  return _loadFontInNamespaceAsync.apply(this, arguments);\n}\nfunction _loadFontInNamespaceAsync() {\n  _loadFontInNamespaceAsync = (0, _asyncToGenerator2.default)(function* (fontFamily, source) {\n    if (!source) {\n      throw new _expoModulesCore.CodedError(\"ERR_FONT_SOURCE\", \"Cannot load null or undefined font source: { \\\"\" + fontFamily + \"\\\": \" + source + \" }. Expected asset of type `FontSource` for fontFamily of name: \\\"\" + fontFamily + \"\\\"\");\n    }\n    if (_memory.loaded[fontFamily]) {\n      return;\n    }\n    if (_memory.loadPromises.hasOwnProperty(fontFamily)) {\n      return _memory.loadPromises[fontFamily];\n    }\n    var asset = (0, _FontLoader.getAssetForSource)(source);\n    _memory.loadPromises[fontFamily] = (0, _asyncToGenerator2.default)(function* () {\n      try {\n        yield (0, _FontLoader.loadSingleFontAsync)(fontFamily, asset);\n        _memory.loaded[fontFamily] = true;\n      } finally {\n        delete _memory.loadPromises[fontFamily];\n      }\n    })();\n    yield _memory.loadPromises[fontFamily];\n  });\n  return _loadFontInNamespaceAsync.apply(this, arguments);\n}\nfunction unloadAllAsync() {\n  return _unloadAllAsync.apply(this, arguments);\n}\nfunction _unloadAllAsync() {\n  _unloadAllAsync = (0, _asyncToGenerator2.default)(function* () {\n    if (!_ExpoFontLoader.default.unloadAllAsync) {\n      throw new _expoModulesCore.UnavailabilityError('expo-font', 'unloadAllAsync');\n    }\n    if (Object.keys(_memory.loadPromises).length) {\n      throw new _expoModulesCore.CodedError(\"ERR_UNLOAD\", \"Cannot unload fonts while they're still loading: \" + Object.keys(_memory.loadPromises).join(', '));\n    }\n    for (var fontFamily of Object.keys(_memory.loaded)) {\n      delete _memory.loaded[fontFamily];\n    }\n    yield _ExpoFontLoader.default.unloadAllAsync();\n  });\n  return _unloadAllAsync.apply(this, arguments);\n}\nfunction unloadAsync(_x3, _x4) {\n  return _unloadAsync.apply(this, arguments);\n}\nfunction _unloadAsync() {\n  _unloadAsync = (0, _asyncToGenerator2.default)(function* (fontFamilyOrFontMap, options) {\n    if (!_ExpoFontLoader.default.unloadAsync) {\n      throw new _expoModulesCore.UnavailabilityError('expo-font', 'unloadAsync');\n    }\n    if (typeof fontFamilyOrFontMap === 'object') {\n      if (options) {\n        throw new _expoModulesCore.CodedError(\"ERR_FONT_API\", \"No fontFamily can be used for the provided options: \" + options + \". The second argument of `unloadAsync()` can only be used with a `string` value as the first argument.\");\n      }\n      var fontMap = fontFamilyOrFontMap;\n      var names = Object.keys(fontMap);\n      yield Promise.all(names.map(function (name) {\n        return unloadFontInNamespaceAsync(name, fontMap[name]);\n      }));\n      return;\n    }\n    return yield unloadFontInNamespaceAsync(fontFamilyOrFontMap, options);\n  });\n  return _unloadAsync.apply(this, arguments);\n}\nfunction unloadFontInNamespaceAsync(_x5, _x6) {\n  return _unloadFontInNamespaceAsync.apply(this, arguments);\n}\nfunction _unloadFontInNamespaceAsync() {\n  _unloadFontInNamespaceAsync = (0, _asyncToGenerator2.default)(function* (fontFamily, options) {\n    if (!_memory.loaded[fontFamily]) {\n      return;\n    } else {\n      delete _memory.loaded[fontFamily];\n    }\n    var nativeFontName = (0, _FontLoader.getNativeFontName)(fontFamily);\n    if (!nativeFontName) {\n      throw new _expoModulesCore.CodedError(\"ERR_FONT_FAMILY\", \"Cannot unload an empty name\");\n    }\n    yield _ExpoFontLoader.default.unloadAsync(nativeFontName, options);\n  });\n  return _unloadFontInNamespaceAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_expoModulesCore","require","_ExpoFontLoader","_interopRequireDefault","_Font","_FontLoader","_memory","_server","processFontFamily","fontFamily","fontFamilyNeedsScoping","isLoaded","__DEV__","isLoading","console","warn","getNativeFontName","Platform","OS","loaded","ExpoFontLoader","loadPromises","loadAsync","fontFamilyOrFontMap","source","isServer","window","Promise","reject","CodedError","fontMap","names","Object","keys","map","name","registerStaticFont","resolve","all","loadFontInNamespaceAsync","then","_x","_x2","_loadFontInNamespaceAsync","apply","arguments","_asyncToGenerator2","default","hasOwnProperty","asset","getAssetForSource","loadSingleFontAsync","unloadAllAsync","_unloadAllAsync","UnavailabilityError","length","join","unloadAsync","_x3","_x4","_unloadAsync","options","unloadFontInNamespaceAsync","_x5","_x6","_unloadFontInNamespaceAsync","nativeFontName"],"sources":["C:\\Users\\erick_ribeiro-souza\\Desktop\\s.a 2\\sa.ReactNative2semestre-1\\node_modules\\expo-font\\src\\Font.ts"],"sourcesContent":["import { CodedError, Platform, UnavailabilityError } from 'expo-modules-core';\n\nimport ExpoFontLoader from './ExpoFontLoader';\nimport { FontDisplay, FontSource, FontResource, UnloadFontOptions } from './Font.types';\nimport {\n  getAssetForSource,\n  loadSingleFontAsync,\n  fontFamilyNeedsScoping,\n  getNativeFontName,\n} from './FontLoader';\nimport { loaded, loadPromises } from './memory';\nimport { registerStaticFont } from './server';\n\n// @needsAudit\n// note(brentvatne): at some point we may want to warn if this is called outside of a managed app.\n/**\n * Used to transform font family names to the scoped name. This does not need to\n * be called in standalone or bare apps but it will return unscoped font family\n * names if it is called in those contexts.\n *\n * @param fontFamily Name of font to process.\n * @returns Returns a name processed for use with the [current workflow](https://docs.expo.dev/archive/managed-vs-bare/).\n */\nexport function processFontFamily(fontFamily: string | null): string | null {\n  if (!fontFamily || !fontFamilyNeedsScoping(fontFamily)) {\n    return fontFamily;\n  }\n\n  if (!isLoaded(fontFamily)) {\n    if (__DEV__) {\n      if (isLoading(fontFamily)) {\n        console.warn(\n          `You started loading the font \"${fontFamily}\", but used it before it finished loading. You need to wait for Font.loadAsync to complete before using the font.`\n        );\n      } else {\n        console.warn(\n          `fontFamily \"${fontFamily}\" is not a system font and has not been loaded through expo-font.`\n        );\n      }\n    }\n  }\n\n  return `ExpoFont-${getNativeFontName(fontFamily)}`;\n}\n\n// @needsAudit\n/**\n * Synchronously detect if the font for `fontFamily` has finished loading.\n *\n * @param fontFamily The name used to load the `FontResource`.\n * @return Returns `true` if the font has fully loaded.\n */\nexport function isLoaded(fontFamily: string): boolean {\n  if (Platform.OS === 'web') {\n    return fontFamily in loaded || !!ExpoFontLoader.isLoaded(fontFamily);\n  }\n  return fontFamily in loaded;\n}\n\n// @needsAudit\n/**\n * Synchronously detect if the font for `fontFamily` is still being loaded.\n *\n * @param fontFamily The name used to load the `FontResource`.\n * @returns Returns `true` if the font is still loading.\n */\nexport function isLoading(fontFamily: string): boolean {\n  return fontFamily in loadPromises;\n}\n\n// @needsAudit\n/**\n * Highly efficient method for loading fonts from static or remote resources which can then be used\n * with the platform's native text elements. In the browser this generates a `@font-face` block in\n * a shared style sheet for fonts. No CSS is needed to use this method.\n *\n * @param fontFamilyOrFontMap string or map of values that can be used as the [`fontFamily`](https://reactnative.dev/docs/text#style)\n * style prop with React Native Text elements.\n * @param source the font asset that should be loaded into the `fontFamily` namespace.\n *\n * @return Returns a promise that fulfils when the font has loaded. Often you may want to wrap the\n * method in a `try/catch/finally` to ensure the app continues if the font fails to load.\n */\nexport function loadAsync(\n  fontFamilyOrFontMap: string | Record<string, FontSource>,\n  source?: FontSource\n): Promise<void> {\n  // NOTE(EvanBacon): Static render pass on web must be synchronous to collect all fonts.\n  // Because of this, `loadAsync` doesn't use the `async` keyword and deviates from the\n  // standard Expo SDK style guide.\n  const isServer = Platform.OS === 'web' && typeof window === 'undefined';\n\n  if (typeof fontFamilyOrFontMap === 'object') {\n    if (source) {\n      return Promise.reject(\n        new CodedError(\n          `ERR_FONT_API`,\n          `No fontFamily can be used for the provided source: ${source}. The second argument of \\`loadAsync()\\` can only be used with a \\`string\\` value as the first argument.`\n        )\n      );\n    }\n    const fontMap = fontFamilyOrFontMap;\n    const names = Object.keys(fontMap);\n\n    if (isServer) {\n      names.map((name) => registerStaticFont(name, fontMap[name]));\n      return Promise.resolve();\n    }\n\n    return Promise.all(names.map((name) => loadFontInNamespaceAsync(name, fontMap[name]))).then(\n      () => {}\n    );\n  }\n\n  if (isServer) {\n    registerStaticFont(fontFamilyOrFontMap, source);\n    return Promise.resolve();\n  }\n\n  return loadFontInNamespaceAsync(fontFamilyOrFontMap, source);\n}\n\nasync function loadFontInNamespaceAsync(\n  fontFamily: string,\n  source?: FontSource | null\n): Promise<void> {\n  if (!source) {\n    throw new CodedError(\n      `ERR_FONT_SOURCE`,\n      `Cannot load null or undefined font source: { \"${fontFamily}\": ${source} }. Expected asset of type \\`FontSource\\` for fontFamily of name: \"${fontFamily}\"`\n    );\n  }\n\n  if (loaded[fontFamily]) {\n    return;\n  }\n\n  if (loadPromises.hasOwnProperty(fontFamily)) {\n    return loadPromises[fontFamily];\n  }\n\n  // Important: we want all callers that concurrently try to load the same font to await the same\n  // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n  // promise in the program, we need to create the promise synchronously without yielding the event\n  // loop from this point.\n\n  const asset = getAssetForSource(source);\n  loadPromises[fontFamily] = (async () => {\n    try {\n      await loadSingleFontAsync(fontFamily, asset);\n      loaded[fontFamily] = true;\n    } finally {\n      delete loadPromises[fontFamily];\n    }\n  })();\n\n  await loadPromises[fontFamily];\n}\n\n// @needsAudit\n/**\n * Unloads all the custom fonts. This is used for testing.\n */\nexport async function unloadAllAsync(): Promise<void> {\n  if (!ExpoFontLoader.unloadAllAsync) {\n    throw new UnavailabilityError('expo-font', 'unloadAllAsync');\n  }\n\n  if (Object.keys(loadPromises).length) {\n    throw new CodedError(\n      `ERR_UNLOAD`,\n      `Cannot unload fonts while they're still loading: ${Object.keys(loadPromises).join(', ')}`\n    );\n  }\n\n  for (const fontFamily of Object.keys(loaded)) {\n    delete loaded[fontFamily];\n  }\n\n  await ExpoFontLoader.unloadAllAsync();\n}\n\n// @needsAudit\n/**\n * Unload custom fonts matching the `fontFamily`s and display values provided.\n * Because fonts are automatically unloaded on every platform this is mostly used for testing.\n *\n * @param fontFamilyOrFontMap The name or names of the custom fonts that will be unloaded.\n * @param options When `fontFamilyOrFontMap` is a string, this should be the font source used to load\n * the custom font originally.\n */\nexport async function unloadAsync(\n  fontFamilyOrFontMap: string | Record<string, UnloadFontOptions>,\n  options?: UnloadFontOptions\n): Promise<void> {\n  if (!ExpoFontLoader.unloadAsync) {\n    throw new UnavailabilityError('expo-font', 'unloadAsync');\n  }\n  if (typeof fontFamilyOrFontMap === 'object') {\n    if (options) {\n      throw new CodedError(\n        `ERR_FONT_API`,\n        `No fontFamily can be used for the provided options: ${options}. The second argument of \\`unloadAsync()\\` can only be used with a \\`string\\` value as the first argument.`\n      );\n    }\n    const fontMap = fontFamilyOrFontMap;\n    const names = Object.keys(fontMap);\n    await Promise.all(names.map((name) => unloadFontInNamespaceAsync(name, fontMap[name])));\n    return;\n  }\n\n  return await unloadFontInNamespaceAsync(fontFamilyOrFontMap, options);\n}\n\nasync function unloadFontInNamespaceAsync(\n  fontFamily: string,\n  options?: UnloadFontOptions | null\n): Promise<void> {\n  if (!loaded[fontFamily]) {\n    return;\n  } else {\n    delete loaded[fontFamily];\n  }\n\n  // Important: we want all callers that concurrently try to load the same font to await the same\n  // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n  // promise in the program, we need to create the promise synchronously without yielding the event\n  // loop from this point.\n\n  const nativeFontName = getNativeFontName(fontFamily);\n\n  if (!nativeFontName) {\n    throw new CodedError(`ERR_FONT_FAMILY`, `Cannot unload an empty name`);\n  }\n\n  await ExpoFontLoader.unloadAsync(nativeFontName, options);\n}\n\nexport { FontDisplay, FontSource, FontResource, UnloadFontOptions };\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}