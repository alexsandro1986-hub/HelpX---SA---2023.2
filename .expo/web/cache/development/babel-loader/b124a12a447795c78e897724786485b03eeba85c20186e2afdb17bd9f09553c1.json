{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport normalizeColor from \"../../StyleSheet/normalizeColor\";\nimport processColor from \"../../StyleSheet/processColor\";\nimport Easing from \"../Easing\";\nimport NativeAnimatedHelper from \"../NativeAnimatedHelper\";\nimport AnimatedWithChildren from \"./AnimatedWithChildren\";\nimport invariant from 'invariant';\nfunction createNumericInterpolation(config) {\n  var outputRange = config.outputRange;\n  var inputRange = config.inputRange;\n  var easing = config.easing || Easing.linear;\n  var extrapolateLeft = 'extend';\n  if (config.extrapolateLeft !== undefined) {\n    extrapolateLeft = config.extrapolateLeft;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateLeft = config.extrapolate;\n  }\n  var extrapolateRight = 'extend';\n  if (config.extrapolateRight !== undefined) {\n    extrapolateRight = config.extrapolateRight;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateRight = config.extrapolate;\n  }\n  return function (input) {\n    invariant(typeof input === 'number', 'Cannot interpolation an input which is not a number');\n    var range = findRange(input, inputRange);\n    return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight);\n  };\n}\nfunction interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight) {\n  var result = input;\n  if (result < inputMin) {\n    if (extrapolateLeft === 'identity') {\n      return result;\n    } else if (extrapolateLeft === 'clamp') {\n      result = inputMin;\n    } else if (extrapolateLeft === 'extend') {}\n  }\n  if (result > inputMax) {\n    if (extrapolateRight === 'identity') {\n      return result;\n    } else if (extrapolateRight === 'clamp') {\n      result = inputMax;\n    } else if (extrapolateRight === 'extend') {}\n  }\n  if (outputMin === outputMax) {\n    return outputMin;\n  }\n  if (inputMin === inputMax) {\n    if (input <= inputMin) {\n      return outputMin;\n    }\n    return outputMax;\n  }\n  if (inputMin === -Infinity) {\n    result = -result;\n  } else if (inputMax === Infinity) {\n    result = result - inputMin;\n  } else {\n    result = (result - inputMin) / (inputMax - inputMin);\n  }\n  result = easing(result);\n  if (outputMin === -Infinity) {\n    result = -result;\n  } else if (outputMax === Infinity) {\n    result = result + outputMin;\n  } else {\n    result = result * (outputMax - outputMin) + outputMin;\n  }\n  return result;\n}\nvar numericComponentRegex = /[+-]?(?:\\d+\\.?\\d*|\\.\\d+)(?:[eE][+-]?\\d+)?/g;\nfunction mapStringToNumericComponents(input) {\n  var normalizedColor = normalizeColor(input);\n  invariant(normalizedColor == null || typeof normalizedColor !== 'object', 'PlatformColors are not supported');\n  if (typeof normalizedColor === 'number') {\n    normalizedColor = normalizedColor || 0;\n    var r = (normalizedColor & 0xff000000) >>> 24;\n    var g = (normalizedColor & 0x00ff0000) >>> 16;\n    var b = (normalizedColor & 0x0000ff00) >>> 8;\n    var a = (normalizedColor & 0x000000ff) / 255;\n    return {\n      isColor: true,\n      components: [r, g, b, a]\n    };\n  } else {\n    var components = [];\n    var lastMatchEnd = 0;\n    var match;\n    while ((match = numericComponentRegex.exec(input)) != null) {\n      if (match.index > lastMatchEnd) {\n        components.push(input.substring(lastMatchEnd, match.index));\n      }\n      components.push(parseFloat(match[0]));\n      lastMatchEnd = match.index + match[0].length;\n    }\n    invariant(components.length > 0, 'outputRange must contain color or value with numeric component');\n    if (lastMatchEnd < input.length) {\n      components.push(input.substring(lastMatchEnd, input.length));\n    }\n    return {\n      isColor: false,\n      components: components\n    };\n  }\n}\nfunction createStringInterpolation(config) {\n  invariant(config.outputRange.length >= 2, 'Bad output range');\n  var outputRange = config.outputRange.map(mapStringToNumericComponents);\n  var isColor = outputRange[0].isColor;\n  if (__DEV__) {\n    invariant(outputRange.every(function (output) {\n      return output.isColor === isColor;\n    }), 'All elements of output range should either be a color or a string with numeric components');\n    var firstOutput = outputRange[0].components;\n    invariant(outputRange.every(function (output) {\n      return output.components.length === firstOutput.length;\n    }), 'All elements of output range should have the same number of components');\n    invariant(outputRange.every(function (output) {\n      return output.components.every(function (component, i) {\n        return typeof component === 'number' || component === firstOutput[i];\n      });\n    }), 'All elements of output range should have the same non-numeric components');\n  }\n  var numericComponents = outputRange.map(function (output) {\n    return isColor ? output.components : output.components.filter(function (c) {\n      return typeof c === 'number';\n    });\n  });\n  var interpolations = numericComponents[0].map(function (_, i) {\n    return createNumericInterpolation(_objectSpread(_objectSpread({}, config), {}, {\n      outputRange: numericComponents.map(function (components) {\n        return components[i];\n      })\n    }));\n  });\n  if (!isColor) {\n    return function (input) {\n      var values = interpolations.map(function (interpolation) {\n        return interpolation(input);\n      });\n      var i = 0;\n      return outputRange[0].components.map(function (c) {\n        return typeof c === 'number' ? values[i++] : c;\n      }).join('');\n    };\n  } else {\n    return function (input) {\n      var result = interpolations.map(function (interpolation, i) {\n        var value = interpolation(input);\n        return i < 3 ? Math.round(value) : Math.round(value * 1000) / 1000;\n      });\n      return \"rgba(\" + result[0] + \", \" + result[1] + \", \" + result[2] + \", \" + result[3] + \")\";\n    };\n  }\n}\nfunction findRange(input, inputRange) {\n  var i;\n  for (i = 1; i < inputRange.length - 1; ++i) {\n    if (inputRange[i] >= input) {\n      break;\n    }\n  }\n  return i - 1;\n}\nfunction checkValidRanges(inputRange, outputRange) {\n  checkInfiniteRange('outputRange', outputRange);\n  checkInfiniteRange('inputRange', inputRange);\n  checkValidInputRange(inputRange);\n  invariant(inputRange.length === outputRange.length, 'inputRange (' + inputRange.length + ') and outputRange (' + outputRange.length + ') must have the same length');\n}\nfunction checkValidInputRange(arr) {\n  invariant(arr.length >= 2, 'inputRange must have at least 2 elements');\n  var message = 'inputRange must be monotonically non-decreasing ' + String(arr);\n  for (var i = 1; i < arr.length; ++i) {\n    invariant(arr[i] >= arr[i - 1], message);\n  }\n}\nfunction checkInfiniteRange(name, arr) {\n  invariant(arr.length >= 2, name + ' must have at least 2 elements');\n  invariant(arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity, name + 'cannot be ]-infinity;+infinity[ ' + arr);\n}\nvar AnimatedInterpolation = function (_AnimatedWithChildren) {\n  _inherits(AnimatedInterpolation, _AnimatedWithChildren);\n  var _super = _createSuper(AnimatedInterpolation);\n  function AnimatedInterpolation(parent, config) {\n    var _this;\n    _classCallCheck(this, AnimatedInterpolation);\n    _this = _super.call(this);\n    _this._parent = parent;\n    _this._config = config;\n    if (__DEV__) {\n      checkValidRanges(config.inputRange, config.outputRange);\n      _this._getInterpolation();\n    }\n    return _this;\n  }\n  _createClass(AnimatedInterpolation, [{\n    key: \"_getInterpolation\",\n    value: function _getInterpolation() {\n      if (!this._interpolation) {\n        var config = this._config;\n        if (config.outputRange && typeof config.outputRange[0] === 'string') {\n          this._interpolation = createStringInterpolation(config);\n        } else {\n          this._interpolation = createNumericInterpolation(config);\n        }\n      }\n      return this._interpolation;\n    }\n  }, {\n    key: \"__makeNative\",\n    value: function __makeNative(platformConfig) {\n      this._parent.__makeNative(platformConfig);\n      _get(_getPrototypeOf(AnimatedInterpolation.prototype), \"__makeNative\", this).call(this, platformConfig);\n    }\n  }, {\n    key: \"__getValue\",\n    value: function __getValue() {\n      var parentValue = this._parent.__getValue();\n      invariant(typeof parentValue === 'number', 'Cannot interpolate an input which is not a number.');\n      return this._getInterpolation()(parentValue);\n    }\n  }, {\n    key: \"interpolate\",\n    value: function interpolate(config) {\n      return new AnimatedInterpolation(this, config);\n    }\n  }, {\n    key: \"__attach\",\n    value: function __attach() {\n      this._parent.__addChild(this);\n    }\n  }, {\n    key: \"__detach\",\n    value: function __detach() {\n      this._parent.__removeChild(this);\n      _get(_getPrototypeOf(AnimatedInterpolation.prototype), \"__detach\", this).call(this);\n    }\n  }, {\n    key: \"__getNativeConfig\",\n    value: function __getNativeConfig() {\n      if (__DEV__) {\n        NativeAnimatedHelper.validateInterpolation(this._config);\n      }\n      var outputRange = this._config.outputRange;\n      var outputType = null;\n      if (typeof outputRange[0] === 'string') {\n        outputRange = outputRange.map(function (value) {\n          var processedColor = processColor(value);\n          if (typeof processedColor === 'number') {\n            outputType = 'color';\n            return processedColor;\n          } else {\n            return NativeAnimatedHelper.transformDataType(value);\n          }\n        });\n      }\n      return {\n        inputRange: this._config.inputRange,\n        outputRange: outputRange,\n        outputType: outputType,\n        extrapolateLeft: this._config.extrapolateLeft || this._config.extrapolate || 'extend',\n        extrapolateRight: this._config.extrapolateRight || this._config.extrapolate || 'extend',\n        type: 'interpolation'\n      };\n    }\n  }]);\n  return AnimatedInterpolation;\n}(AnimatedWithChildren);\nexport { AnimatedInterpolation as default };","map":{"version":3,"names":["_classCallCheck","_createClass","_get","_inherits","_possibleConstructorReturn","_getPrototypeOf","_defineProperty","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","constructor","Reflect","construct","arguments","apply","sham","Proxy","Boolean","prototype","valueOf","call","e","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","_objectSpread","target","i","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","normalizeColor","processColor","Easing","NativeAnimatedHelper","AnimatedWithChildren","invariant","createNumericInterpolation","config","outputRange","inputRange","easing","linear","extrapolateLeft","undefined","extrapolate","extrapolateRight","input","range","findRange","interpolate","inputMin","inputMax","outputMin","outputMax","Infinity","numericComponentRegex","mapStringToNumericComponents","normalizedColor","r","g","b","a","isColor","components","lastMatchEnd","match","exec","index","substring","parseFloat","createStringInterpolation","map","__DEV__","every","output","firstOutput","component","numericComponents","c","interpolations","_","values","interpolation","join","value","Math","round","checkValidRanges","checkInfiniteRange","checkValidInputRange","arr","message","String","name","AnimatedInterpolation","_AnimatedWithChildren","_super","parent","_this","_parent","_config","_getInterpolation","_interpolation","__makeNative","platformConfig","__getValue","parentValue","__attach","__addChild","__detach","__removeChild","__getNativeConfig","validateInterpolation","outputType","processedColor","transformDataType","type","default"],"sources":["C:/xando/sa/sa.ReactNative2semestre/node_modules/react-native/Libraries/Animated/nodes/AnimatedInterpolation.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n/* eslint no-bitwise: 0 */\n\n'use strict';\n\nimport type {PlatformConfig} from '../AnimatedPlatformConfig';\nimport type AnimatedNode from './AnimatedNode';\n\nimport normalizeColor from '../../StyleSheet/normalizeColor';\nimport processColor from '../../StyleSheet/processColor';\nimport Easing from '../Easing';\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\nimport AnimatedWithChildren from './AnimatedWithChildren';\nimport invariant from 'invariant';\n\ntype ExtrapolateType = 'extend' | 'identity' | 'clamp';\n\nexport type InterpolationConfigType<OutputT: number | string> = $ReadOnly<{\n  inputRange: $ReadOnlyArray<number>,\n  outputRange: $ReadOnlyArray<OutputT>,\n  easing?: (input: number) => number,\n  extrapolate?: ExtrapolateType,\n  extrapolateLeft?: ExtrapolateType,\n  extrapolateRight?: ExtrapolateType,\n}>;\n\n/**\n * Very handy helper to map input ranges to output ranges with an easing\n * function and custom behavior outside of the ranges.\n */\nfunction createNumericInterpolation(\n  config: InterpolationConfigType<number>,\n): (input: number) => number {\n  const outputRange: $ReadOnlyArray<number> = (config.outputRange: any);\n  const inputRange = config.inputRange;\n\n  const easing = config.easing || Easing.linear;\n\n  let extrapolateLeft: ExtrapolateType = 'extend';\n  if (config.extrapolateLeft !== undefined) {\n    extrapolateLeft = config.extrapolateLeft;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateLeft = config.extrapolate;\n  }\n\n  let extrapolateRight: ExtrapolateType = 'extend';\n  if (config.extrapolateRight !== undefined) {\n    extrapolateRight = config.extrapolateRight;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateRight = config.extrapolate;\n  }\n\n  return input => {\n    invariant(\n      typeof input === 'number',\n      'Cannot interpolation an input which is not a number',\n    );\n\n    const range = findRange(input, inputRange);\n    return (interpolate(\n      input,\n      inputRange[range],\n      inputRange[range + 1],\n      outputRange[range],\n      outputRange[range + 1],\n      easing,\n      extrapolateLeft,\n      extrapolateRight,\n    ): any);\n  };\n}\n\nfunction interpolate(\n  input: number,\n  inputMin: number,\n  inputMax: number,\n  outputMin: number,\n  outputMax: number,\n  easing: (input: number) => number,\n  extrapolateLeft: ExtrapolateType,\n  extrapolateRight: ExtrapolateType,\n) {\n  let result = input;\n\n  // Extrapolate\n  if (result < inputMin) {\n    if (extrapolateLeft === 'identity') {\n      return result;\n    } else if (extrapolateLeft === 'clamp') {\n      result = inputMin;\n    } else if (extrapolateLeft === 'extend') {\n      // noop\n    }\n  }\n\n  if (result > inputMax) {\n    if (extrapolateRight === 'identity') {\n      return result;\n    } else if (extrapolateRight === 'clamp') {\n      result = inputMax;\n    } else if (extrapolateRight === 'extend') {\n      // noop\n    }\n  }\n\n  if (outputMin === outputMax) {\n    return outputMin;\n  }\n\n  if (inputMin === inputMax) {\n    if (input <= inputMin) {\n      return outputMin;\n    }\n    return outputMax;\n  }\n\n  // Input Range\n  if (inputMin === -Infinity) {\n    result = -result;\n  } else if (inputMax === Infinity) {\n    result = result - inputMin;\n  } else {\n    result = (result - inputMin) / (inputMax - inputMin);\n  }\n\n  // Easing\n  result = easing(result);\n\n  // Output Range\n  if (outputMin === -Infinity) {\n    result = -result;\n  } else if (outputMax === Infinity) {\n    result = result + outputMin;\n  } else {\n    result = result * (outputMax - outputMin) + outputMin;\n  }\n\n  return result;\n}\n\nconst numericComponentRegex = /[+-]?(?:\\d+\\.?\\d*|\\.\\d+)(?:[eE][+-]?\\d+)?/g;\n\n// Maps string inputs an RGBA color or an array of numeric components\nfunction mapStringToNumericComponents(\n  input: string,\n):\n  | {isColor: true, components: [number, number, number, number]}\n  | {isColor: false, components: $ReadOnlyArray<number | string>} {\n  let normalizedColor = normalizeColor(input);\n  invariant(\n    normalizedColor == null || typeof normalizedColor !== 'object',\n    'PlatformColors are not supported',\n  );\n\n  if (typeof normalizedColor === 'number') {\n    normalizedColor = normalizedColor || 0;\n    const r = (normalizedColor & 0xff000000) >>> 24;\n    const g = (normalizedColor & 0x00ff0000) >>> 16;\n    const b = (normalizedColor & 0x0000ff00) >>> 8;\n    const a = (normalizedColor & 0x000000ff) / 255;\n    return {isColor: true, components: [r, g, b, a]};\n  } else {\n    const components: Array<string | number> = [];\n    let lastMatchEnd = 0;\n    let match: RegExp$matchResult;\n    while ((match = (numericComponentRegex.exec(input): any)) != null) {\n      if (match.index > lastMatchEnd) {\n        components.push(input.substring(lastMatchEnd, match.index));\n      }\n      components.push(parseFloat(match[0]));\n      lastMatchEnd = match.index + match[0].length;\n    }\n    invariant(\n      components.length > 0,\n      'outputRange must contain color or value with numeric component',\n    );\n    if (lastMatchEnd < input.length) {\n      components.push(input.substring(lastMatchEnd, input.length));\n    }\n    return {isColor: false, components};\n  }\n}\n\n/**\n * Supports string shapes by extracting numbers so new values can be computed,\n * and recombines those values into new strings of the same shape.  Supports\n * things like:\n *\n *   rgba(123, 42, 99, 0.36) // colors\n *   -45deg                  // values with units\n */\nfunction createStringInterpolation(\n  config: InterpolationConfigType<string>,\n): (input: number) => string {\n  invariant(config.outputRange.length >= 2, 'Bad output range');\n  const outputRange = config.outputRange.map(mapStringToNumericComponents);\n\n  const isColor = outputRange[0].isColor;\n  if (__DEV__) {\n    invariant(\n      outputRange.every(output => output.isColor === isColor),\n      'All elements of output range should either be a color or a string with numeric components',\n    );\n    const firstOutput = outputRange[0].components;\n    invariant(\n      outputRange.every(\n        output => output.components.length === firstOutput.length,\n      ),\n      'All elements of output range should have the same number of components',\n    );\n    invariant(\n      outputRange.every(output =>\n        output.components.every(\n          (component, i) =>\n            // $FlowIgnoreMe[invalid-compare]\n            typeof component === 'number' || component === firstOutput[i],\n        ),\n      ),\n      'All elements of output range should have the same non-numeric components',\n    );\n  }\n\n  const numericComponents: $ReadOnlyArray<$ReadOnlyArray<number>> =\n    outputRange.map(output =>\n      isColor\n        ? // $FlowIgnoreMe[incompatible-call]\n          output.components\n        : // $FlowIgnoreMe[incompatible-call]\n          output.components.filter(c => typeof c === 'number'),\n    );\n  const interpolations = numericComponents[0].map((_, i) =>\n    createNumericInterpolation({\n      ...config,\n      outputRange: numericComponents.map(components => components[i]),\n    }),\n  );\n  if (!isColor) {\n    return input => {\n      const values = interpolations.map(interpolation => interpolation(input));\n      let i = 0;\n      return outputRange[0].components\n        .map(c => (typeof c === 'number' ? values[i++] : c))\n        .join('');\n    };\n  } else {\n    return input => {\n      const result = interpolations.map((interpolation, i) => {\n        const value = interpolation(input);\n        // rgba requires that the r,g,b are integers.... so we want to round them, but we *dont* want to\n        // round the opacity (4th column).\n        return i < 3 ? Math.round(value) : Math.round(value * 1000) / 1000;\n      });\n      return `rgba(${result[0]}, ${result[1]}, ${result[2]}, ${result[3]})`;\n    };\n  }\n}\n\nfunction findRange(input: number, inputRange: $ReadOnlyArray<number>) {\n  let i;\n  for (i = 1; i < inputRange.length - 1; ++i) {\n    if (inputRange[i] >= input) {\n      break;\n    }\n  }\n  return i - 1;\n}\n\nfunction checkValidRanges<OutputT: number | string>(\n  inputRange: $ReadOnlyArray<number>,\n  outputRange: $ReadOnlyArray<OutputT>,\n) {\n  checkInfiniteRange('outputRange', outputRange);\n  checkInfiniteRange('inputRange', inputRange);\n  checkValidInputRange(inputRange);\n\n  invariant(\n    inputRange.length === outputRange.length,\n    'inputRange (' +\n      inputRange.length +\n      ') and outputRange (' +\n      outputRange.length +\n      ') must have the same length',\n  );\n}\n\nfunction checkValidInputRange(arr: $ReadOnlyArray<number>) {\n  invariant(arr.length >= 2, 'inputRange must have at least 2 elements');\n  const message =\n    'inputRange must be monotonically non-decreasing ' + String(arr);\n  for (let i = 1; i < arr.length; ++i) {\n    invariant(arr[i] >= arr[i - 1], message);\n  }\n}\n\nfunction checkInfiniteRange<OutputT: number | string>(\n  name: string,\n  arr: $ReadOnlyArray<OutputT>,\n) {\n  invariant(arr.length >= 2, name + ' must have at least 2 elements');\n  invariant(\n    arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity,\n    /* $FlowFixMe[incompatible-type] (>=0.13.0) - In the addition expression\n     * below this comment, one or both of the operands may be something that\n     * doesn't cleanly convert to a string, like undefined, null, and object,\n     * etc. If you really mean this implicit string conversion, you can do\n     * something like String(myThing) */\n    // $FlowFixMe[unsafe-addition]\n    name + 'cannot be ]-infinity;+infinity[ ' + arr,\n  );\n}\n\nexport default class AnimatedInterpolation<\n  OutputT: number | string,\n> extends AnimatedWithChildren {\n  _parent: AnimatedNode;\n  _config: InterpolationConfigType<OutputT>;\n  _interpolation: ?(input: number) => OutputT;\n\n  constructor(parent: AnimatedNode, config: InterpolationConfigType<OutputT>) {\n    super();\n    this._parent = parent;\n    this._config = config;\n\n    if (__DEV__) {\n      checkValidRanges(config.inputRange, config.outputRange);\n\n      // Create interpolation eagerly in dev, so we can signal errors faster\n      // even when using the native driver\n      this._getInterpolation();\n    }\n  }\n\n  _getInterpolation(): number => OutputT {\n    if (!this._interpolation) {\n      const config = this._config;\n      if (config.outputRange && typeof config.outputRange[0] === 'string') {\n        this._interpolation = (createStringInterpolation((config: any)): any);\n      } else {\n        this._interpolation = (createNumericInterpolation((config: any)): any);\n      }\n    }\n    return this._interpolation;\n  }\n\n  __makeNative(platformConfig: ?PlatformConfig) {\n    this._parent.__makeNative(platformConfig);\n    super.__makeNative(platformConfig);\n  }\n\n  __getValue(): OutputT {\n    const parentValue: number = this._parent.__getValue();\n    invariant(\n      typeof parentValue === 'number',\n      'Cannot interpolate an input which is not a number.',\n    );\n    return this._getInterpolation()(parentValue);\n  }\n\n  interpolate<NewOutputT: number | string>(\n    config: InterpolationConfigType<NewOutputT>,\n  ): AnimatedInterpolation<NewOutputT> {\n    return new AnimatedInterpolation(this, config);\n  }\n\n  __attach(): void {\n    this._parent.__addChild(this);\n  }\n\n  __detach(): void {\n    this._parent.__removeChild(this);\n    super.__detach();\n  }\n\n  __getNativeConfig(): any {\n    if (__DEV__) {\n      NativeAnimatedHelper.validateInterpolation(this._config);\n    }\n\n    // Only the `outputRange` can contain strings so we don't need to transform `inputRange` here\n    let outputRange = this._config.outputRange;\n    let outputType = null;\n    if (typeof outputRange[0] === 'string') {\n      // $FlowIgnoreMe[incompatible-cast]\n      outputRange = ((outputRange: $ReadOnlyArray<string>).map(value => {\n        const processedColor = processColor(value);\n        if (typeof processedColor === 'number') {\n          outputType = 'color';\n          return processedColor;\n        } else {\n          return NativeAnimatedHelper.transformDataType(value);\n        }\n      }): any);\n    }\n\n    return {\n      inputRange: this._config.inputRange,\n      outputRange,\n      outputType,\n      extrapolateLeft:\n        this._config.extrapolateLeft || this._config.extrapolate || 'extend',\n      extrapolateRight:\n        this._config.extrapolateRight || this._config.extrapolate || 'extend',\n      type: 'interpolation',\n    };\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}