{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useRoute } from \"@react-navigation/native\";\nimport { GiftedChat } from 'react-native-gifted-chat';\nimport { useCallback, useEffect, useState } from \"react\";\nimport { collection, addDoc, onSnapshot, query, orderBy } from \"firebase/firestore\";\nimport { database } from \"../Config/firebase\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Chat() {\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    messages = _useState2[0],\n    setMessages = _useState2[1];\n  var route = useRoute();\n  var name = route.params.name;\n  useEffect(function () {\n    function getMessages() {\n      return _getMessages.apply(this, arguments);\n    }\n    function _getMessages() {\n      _getMessages = _asyncToGenerator(function* () {\n        var values = query(collection(database, 'chats'), orderBy('createdAt', 'desc'));\n        onSnapshot(values, function (snapshot) {\n          return setMessages(snapshot.docs.map(function (doc) {\n            return {\n              _id: doc.data()._id,\n              createdAt: doc.data().createdAt.toDate(),\n              text: doc.data().text,\n              user: doc.data().user\n            };\n          }));\n        });\n      });\n      return _getMessages.apply(this, arguments);\n    }\n    getMessages();\n  }, []);\n  var mensagemEnviada = useCallback(function () {\n    var messages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    setMessages(function (previousMessages) {\n      GiftedChat.append(previousMessages, messages);\n    });\n    var _messages$ = messages[0],\n      _id = _messages$._id,\n      createdAt = _messages$.createdAt,\n      text = _messages$.text,\n      user = _messages$.user;\n    addDoc(collection(database, \"chats\"), {\n      _id: _id,\n      createdAt: createdAt,\n      text: text,\n      user: user\n    });\n  }, []);\n  return _jsxs(View, {\n    children: [_jsx(Text, {\n      children: \"Oi \"\n    }), _jsx(GiftedChat, {\n      messages: messages,\n      onSend: function onSend(msg) {\n        return mensagemEnviada(msg);\n      },\n      user: {\n        _id: name\n      }\n    })]\n  });\n}","map":{"version":3,"names":["useRoute","GiftedChat","useCallback","useEffect","useState","collection","addDoc","onSnapshot","query","orderBy","database","jsx","_jsx","jsxs","_jsxs","Chat","_useState","_useState2","_slicedToArray","messages","setMessages","route","name","params","getMessages","_getMessages","apply","arguments","_asyncToGenerator","values","snapshot","docs","map","doc","_id","data","createdAt","toDate","text","user","mensagemEnviada","length","undefined","previousMessages","append","_messages$","View","children","Text","onSend","msg"],"sources":["C:/Users/gisa_/OneDrive/Documentos/sa.ReactNative2semestre/src/pages/Chat/index.js"],"sourcesContent":["import { useRoute } from \"@react-navigation/native\";\r\n\r\nimport { GiftedChat } from 'react-native-gifted-chat'\r\nimport { useCallback, useEffect, useState } from \"react\";\r\n\r\n//importação do firebase e database\r\nimport { collection, addDoc,onSnapshot, query,orderBy } from \"firebase/firestore\";\r\nimport { database } from \"../Config/firebase\";\r\n\r\nexport default function Chat() {\r\n    const [messages, setMessages] = useState([]);\r\n    const route = useRoute();\r\n    const { name } = route.params;\r\n \r\n    useEffect(() => {\r\n        async function getMessages() {\r\n            const values = query(collection(database, 'chats'), orderBy('createdAt', 'desc'));\r\n            //orderBy('createdAt', 'desc') ordena as mensagens por data de criação\r\n            //Com essa query, o firebase vai retornar as mensagens ordenadas por data de criação\r\n\r\n            //onSnapshot é um listener que fica escutando as alterações no banco de dados\r\n            //sempre que houver uma alteração, ele vai executar a função que está dentro dele\r\n            //Ele faz o Real Time\r\n            onSnapshot(values, (snapshot) => setMessages(\r\n                snapshot.docs.map(doc => ({\r\n                    _id: doc.data()._id,\r\n                    createdAt: doc.data().createdAt.toDate(),\r\n                    text: doc.data().text,\r\n                    user: doc.data().user,\r\n                }))\r\n            ));\r\n        }\r\n        getMessages();\r\n    }, []);\r\n\r\n\r\n    //função que aciona assim que envia a mensagem no aplicativo\r\n    const mensagemEnviada = useCallback((messages = []) => {\r\n        //useCallback retorna um callback memorizado\r\n        // a cada renderização do comopnente, todo o código que esta nele é executado novamente\r\n\r\n\r\n        setMessages(previousMessages =>{\r\n              GiftedChat.append(previousMessages, messages)\r\n              //console.log(previousMessages)\r\n              //console.log(messages)\r\n              //previus messages é o array de mensagens que já existem\r\n              //messages é a nova me que acabou de ser enviada \r\n            }\r\n        );\r\n\r\n\r\n\r\n        //pega a mensagem enviada na posicao 0 de messages e envia para o firebase\r\n        const { _id, createdAt, text, user } = messages[0];\r\n        //envia a mensagem para o firebase\r\n        addDoc(collection(database, \"chats\"), {\r\n            _id,\r\n            createdAt,\r\n            text,\r\n            user,\r\n        });\r\n    }, []);\r\n    \r\n    return (\r\n        <View>\r\n        <Text>Oi </Text>\r\n        <GiftedChat\r\n          messages={messages}\r\n          onSend={msg => mensagemEnviada(msg)}\r\n          user={{\r\n                _id: name,\r\n            }}\r\n        />\r\n        </View>\r\n    )\r\n}"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,0BAA0B;AAEnD,SAASC,UAAU,QAAQ,0BAA0B;AACrD,SAASC,WAAW,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAGxD,SAASC,UAAU,EAAEC,MAAM,EAACC,UAAU,EAAEC,KAAK,EAACC,OAAO,QAAQ,oBAAoB;AACjF,SAASC,QAAQ;AAA6B,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAE9C,eAAe,SAASC,IAAIA,CAAA,EAAG;EAC3B,IAAAC,SAAA,GAAgCZ,QAAQ,CAAC,EAAE,CAAC;IAAAa,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAArCG,QAAQ,GAAAF,UAAA;IAAEG,WAAW,GAAAH,UAAA;EAC5B,IAAMI,KAAK,GAAGrB,QAAQ,CAAC,CAAC;EACxB,IAAQsB,IAAI,GAAKD,KAAK,CAACE,MAAM,CAArBD,IAAI;EAEZnB,SAAS,CAAC,YAAM;IAAA,SACGqB,WAAWA,CAAA;MAAA,OAAAC,YAAA,CAAAC,KAAA,OAAAC,SAAA;IAAA;IAAA,SAAAF,aAAA;MAAAA,YAAA,GAAAG,iBAAA,CAA1B,aAA6B;QACzB,IAAMC,MAAM,GAAGrB,KAAK,CAACH,UAAU,CAACK,QAAQ,EAAE,OAAO,CAAC,EAAED,OAAO,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;QAOjFF,UAAU,CAACsB,MAAM,EAAE,UAACC,QAAQ;UAAA,OAAKV,WAAW,CACxCU,QAAQ,CAACC,IAAI,CAACC,GAAG,CAAC,UAAAC,GAAG;YAAA,OAAK;cACtBC,GAAG,EAAED,GAAG,CAACE,IAAI,CAAC,CAAC,CAACD,GAAG;cACnBE,SAAS,EAAEH,GAAG,CAACE,IAAI,CAAC,CAAC,CAACC,SAAS,CAACC,MAAM,CAAC,CAAC;cACxCC,IAAI,EAAEL,GAAG,CAACE,IAAI,CAAC,CAAC,CAACG,IAAI;cACrBC,IAAI,EAAEN,GAAG,CAACE,IAAI,CAAC,CAAC,CAACI;YACrB,CAAC;UAAA,CAAC,CACN,CAAC;QAAA,EAAC;MACN,CAAC;MAAA,OAAAd,YAAA,CAAAC,KAAA,OAAAC,SAAA;IAAA;IACDH,WAAW,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EAIN,IAAMgB,eAAe,GAAGtC,WAAW,CAAC,YAAmB;IAAA,IAAlBiB,QAAQ,GAAAQ,SAAA,CAAAc,MAAA,QAAAd,SAAA,QAAAe,SAAA,GAAAf,SAAA,MAAG,EAAE;IAK9CP,WAAW,CAAC,UAAAuB,gBAAgB,EAAG;MACzB1C,UAAU,CAAC2C,MAAM,CAACD,gBAAgB,EAAExB,QAAQ,CAAC;IAK/C,CACJ,CAAC;IAKD,IAAA0B,UAAA,GAAuC1B,QAAQ,CAAC,CAAC,CAAC;MAA1Ce,GAAG,GAAAW,UAAA,CAAHX,GAAG;MAAEE,SAAS,GAAAS,UAAA,CAATT,SAAS;MAAEE,IAAI,GAAAO,UAAA,CAAJP,IAAI;MAAEC,IAAI,GAAAM,UAAA,CAAJN,IAAI;IAElCjC,MAAM,CAACD,UAAU,CAACK,QAAQ,EAAE,OAAO,CAAC,EAAE;MAClCwB,GAAG,EAAHA,GAAG;MACHE,SAAS,EAATA,SAAS;MACTE,IAAI,EAAJA,IAAI;MACJC,IAAI,EAAJA;IACJ,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,OACIzB,KAAA,CAACgC,IAAI;IAAAC,QAAA,GACLnC,IAAA,CAACoC,IAAI;MAAAD,QAAA,EAAC;IAAG,CAAM,CAAC,EAChBnC,IAAA,CAACX,UAAU;MACTkB,QAAQ,EAAEA,QAAS;MACnB8B,MAAM,EAAE,SAAAA,OAAAC,GAAG;QAAA,OAAIV,eAAe,CAACU,GAAG,CAAC;MAAA,CAAC;MACpCX,IAAI,EAAE;QACAL,GAAG,EAAEZ;MACT;IAAE,CACL,CAAC;EAAA,CACI,CAAC;AAEf"},"metadata":{},"sourceType":"module","externalDependencies":[]}