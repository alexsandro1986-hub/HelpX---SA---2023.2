{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _elements = require(\"@react-navigation/elements\");\nvar _native = require(\"@react-navigation/native\");\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _reactNativeSafeAreaContext = require(\"react-native-safe-area-context\");\nvar _ModalPresentationContext = _interopRequireDefault(require(\"../../utils/ModalPresentationContext\"));\nvar _GestureHandler = require(\"../GestureHandler\");\nvar _HeaderContainer = _interopRequireDefault(require(\"../Header/HeaderContainer\"));\nvar _CardStack = _interopRequireDefault(require(\"./CardStack\"));\nvar _excluded = [\"state\", \"descriptors\"];\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar GestureHandlerWrapper = _GestureHandler.GestureHandlerRootView != null ? _GestureHandler.GestureHandlerRootView : _reactNative.View;\nvar isArrayEqual = function isArrayEqual(a, b) {\n  return a.length === b.length && a.every(function (it, index) {\n    return it === b[index];\n  });\n};\nvar StackView = exports.default = function (_React$Component) {\n  (0, _inherits2.default)(StackView, _React$Component);\n  var _super = _createSuper(StackView);\n  function StackView() {\n    var _this;\n    (0, _classCallCheck2.default)(this, StackView);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      routes: [],\n      previousRoutes: [],\n      previousDescriptors: {},\n      openingRouteKeys: [],\n      closingRouteKeys: [],\n      replacingRouteKeys: [],\n      descriptors: {}\n    };\n    _this.getPreviousRoute = function (_ref2) {\n      var route = _ref2.route;\n      var _this$state = _this.state,\n        closingRouteKeys = _this$state.closingRouteKeys,\n        replacingRouteKeys = _this$state.replacingRouteKeys;\n      var routes = _this.state.routes.filter(function (r) {\n        return r.key === route.key || !closingRouteKeys.includes(r.key) && !replacingRouteKeys.includes(r.key);\n      });\n      var index = routes.findIndex(function (r) {\n        return r.key === route.key;\n      });\n      return routes[index - 1];\n    };\n    _this.renderScene = function (_ref3) {\n      var route = _ref3.route;\n      var descriptor = _this.state.descriptors[route.key] || _this.props.descriptors[route.key];\n      if (!descriptor) {\n        return null;\n      }\n      return descriptor.render();\n    };\n    _this.renderHeader = function (props) {\n      return React.createElement(_HeaderContainer.default, props);\n    };\n    _this.handleOpenRoute = function (_ref4) {\n      var route = _ref4.route;\n      var _this$props = _this.props,\n        state = _this$props.state,\n        navigation = _this$props.navigation;\n      var _this$state2 = _this.state,\n        closingRouteKeys = _this$state2.closingRouteKeys,\n        replacingRouteKeys = _this$state2.replacingRouteKeys;\n      if (closingRouteKeys.some(function (key) {\n        return key === route.key;\n      }) && replacingRouteKeys.every(function (key) {\n        return key !== route.key;\n      }) && state.routeNames.includes(route.name) && !state.routes.some(function (r) {\n        return r.key === route.key;\n      })) {\n        navigation.navigate(route);\n      } else {\n        _this.setState(function (state) {\n          return {\n            routes: state.replacingRouteKeys.length ? state.routes.filter(function (r) {\n              return !state.replacingRouteKeys.includes(r.key);\n            }) : state.routes,\n            openingRouteKeys: state.openingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            }),\n            closingRouteKeys: state.closingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            }),\n            replacingRouteKeys: []\n          };\n        });\n      }\n    };\n    _this.handleCloseRoute = function (_ref5) {\n      var route = _ref5.route;\n      var _this$props2 = _this.props,\n        state = _this$props2.state,\n        navigation = _this$props2.navigation;\n      if (state.routes.some(function (r) {\n        return r.key === route.key;\n      })) {\n        navigation.dispatch(Object.assign({}, _native.StackActions.pop(), {\n          source: route.key,\n          target: state.key\n        }));\n      } else {\n        _this.setState(function (state) {\n          return {\n            routes: state.routes.filter(function (r) {\n              return r.key !== route.key;\n            }),\n            openingRouteKeys: state.openingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            }),\n            closingRouteKeys: state.closingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            })\n          };\n        });\n      }\n    };\n    _this.handleTransitionStart = function (_ref6, closing) {\n      var route = _ref6.route;\n      return _this.props.navigation.emit({\n        type: 'transitionStart',\n        data: {\n          closing: closing\n        },\n        target: route.key\n      });\n    };\n    _this.handleTransitionEnd = function (_ref7, closing) {\n      var route = _ref7.route;\n      return _this.props.navigation.emit({\n        type: 'transitionEnd',\n        data: {\n          closing: closing\n        },\n        target: route.key\n      });\n    };\n    _this.handleGestureStart = function (_ref8) {\n      var route = _ref8.route;\n      _this.props.navigation.emit({\n        type: 'gestureStart',\n        target: route.key\n      });\n    };\n    _this.handleGestureEnd = function (_ref9) {\n      var route = _ref9.route;\n      _this.props.navigation.emit({\n        type: 'gestureEnd',\n        target: route.key\n      });\n    };\n    _this.handleGestureCancel = function (_ref10) {\n      var route = _ref10.route;\n      _this.props.navigation.emit({\n        type: 'gestureCancel',\n        target: route.key\n      });\n    };\n    return _this;\n  }\n  (0, _createClass2.default)(StackView, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$props3 = this.props,\n        state = _this$props3.state,\n        _ = _this$props3.descriptors,\n        rest = (0, _objectWithoutProperties2.default)(_this$props3, _excluded);\n      var _this$state3 = this.state,\n        routes = _this$state3.routes,\n        descriptors = _this$state3.descriptors,\n        openingRouteKeys = _this$state3.openingRouteKeys,\n        closingRouteKeys = _this$state3.closingRouteKeys;\n      return React.createElement(GestureHandlerWrapper, {\n        style: styles.container\n      }, React.createElement(_elements.SafeAreaProviderCompat, null, React.createElement(_reactNativeSafeAreaContext.SafeAreaInsetsContext.Consumer, null, function (insets) {\n        return React.createElement(_ModalPresentationContext.default.Consumer, null, function (isParentModal) {\n          return React.createElement(_elements.HeaderShownContext.Consumer, null, function (isParentHeaderShown) {\n            return React.createElement(_CardStack.default, _extends({\n              insets: insets,\n              isParentHeaderShown: isParentHeaderShown,\n              isParentModal: isParentModal,\n              getPreviousRoute: _this2.getPreviousRoute,\n              routes: routes,\n              openingRouteKeys: openingRouteKeys,\n              closingRouteKeys: closingRouteKeys,\n              onOpenRoute: _this2.handleOpenRoute,\n              onCloseRoute: _this2.handleCloseRoute,\n              onTransitionStart: _this2.handleTransitionStart,\n              onTransitionEnd: _this2.handleTransitionEnd,\n              renderHeader: _this2.renderHeader,\n              renderScene: _this2.renderScene,\n              state: state,\n              descriptors: descriptors,\n              onGestureStart: _this2.handleGestureStart,\n              onGestureEnd: _this2.handleGestureEnd,\n              onGestureCancel: _this2.handleGestureCancel\n            }, rest));\n          });\n        });\n      })));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if ((props.state.routes === state.previousRoutes || isArrayEqual(props.state.routes.map(function (r) {\n        return r.key;\n      }), state.previousRoutes.map(function (r) {\n        return r.key;\n      }))) && state.routes.length) {\n        var _routes = state.routes;\n        var _previousRoutes = state.previousRoutes;\n        var _descriptors = props.descriptors;\n        var previousDescriptors = state.previousDescriptors;\n        if (props.descriptors !== state.previousDescriptors) {\n          _descriptors = state.routes.reduce(function (acc, route) {\n            acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];\n            return acc;\n          }, {});\n          previousDescriptors = props.descriptors;\n        }\n        if (props.state.routes !== state.previousRoutes) {\n          var map = props.state.routes.reduce(function (acc, route) {\n            acc[route.key] = route;\n            return acc;\n          }, {});\n          _routes = state.routes.map(function (route) {\n            return map[route.key] || route;\n          });\n          _previousRoutes = props.state.routes;\n        }\n        return {\n          routes: _routes,\n          previousRoutes: _previousRoutes,\n          descriptors: _descriptors,\n          previousDescriptors: previousDescriptors\n        };\n      }\n      var routes = props.state.index < props.state.routes.length - 1 ? props.state.routes.slice(0, props.state.index + 1) : props.state.routes;\n      var openingRouteKeys = state.openingRouteKeys,\n        closingRouteKeys = state.closingRouteKeys,\n        replacingRouteKeys = state.replacingRouteKeys,\n        previousRoutes = state.previousRoutes;\n      var previousFocusedRoute = previousRoutes[previousRoutes.length - 1];\n      var nextFocusedRoute = routes[routes.length - 1];\n      var isAnimationEnabled = function isAnimationEnabled(key) {\n        var descriptor = props.descriptors[key] || state.descriptors[key];\n        return descriptor ? descriptor.options.animationEnabled !== false : true;\n      };\n      var getAnimationTypeForReplace = function getAnimationTypeForReplace(key) {\n        var _descriptor$options$a;\n        var descriptor = props.descriptors[key] || state.descriptors[key];\n        return (_descriptor$options$a = descriptor.options.animationTypeForReplace) != null ? _descriptor$options$a : 'push';\n      };\n      if (previousFocusedRoute && previousFocusedRoute.key !== nextFocusedRoute.key) {\n        if (!previousRoutes.some(function (r) {\n          return r.key === nextFocusedRoute.key;\n        })) {\n          if (isAnimationEnabled(nextFocusedRoute.key) && !openingRouteKeys.includes(nextFocusedRoute.key)) {\n            openingRouteKeys = [].concat((0, _toConsumableArray2.default)(openingRouteKeys), [nextFocusedRoute.key]);\n            closingRouteKeys = closingRouteKeys.filter(function (key) {\n              return key !== nextFocusedRoute.key;\n            });\n            replacingRouteKeys = replacingRouteKeys.filter(function (key) {\n              return key !== nextFocusedRoute.key;\n            });\n            if (!routes.some(function (r) {\n              return r.key === previousFocusedRoute.key;\n            })) {\n              openingRouteKeys = openingRouteKeys.filter(function (key) {\n                return key !== previousFocusedRoute.key;\n              });\n              if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n                closingRouteKeys = [].concat((0, _toConsumableArray2.default)(closingRouteKeys), [previousFocusedRoute.key]);\n                openingRouteKeys = openingRouteKeys.filter(function (key) {\n                  return key !== nextFocusedRoute.key;\n                });\n                routes = [].concat((0, _toConsumableArray2.default)(routes), [previousFocusedRoute]);\n              } else {\n                replacingRouteKeys = [].concat((0, _toConsumableArray2.default)(replacingRouteKeys), [previousFocusedRoute.key]);\n                closingRouteKeys = closingRouteKeys.filter(function (key) {\n                  return key !== previousFocusedRoute.key;\n                });\n                routes = routes.slice();\n                routes.splice(routes.length - 1, 0, previousFocusedRoute);\n              }\n            }\n          }\n        } else if (!routes.some(function (r) {\n          return r.key === previousFocusedRoute.key;\n        })) {\n          if (isAnimationEnabled(previousFocusedRoute.key) && !closingRouteKeys.includes(previousFocusedRoute.key)) {\n            closingRouteKeys = [].concat((0, _toConsumableArray2.default)(closingRouteKeys), [previousFocusedRoute.key]);\n            openingRouteKeys = openingRouteKeys.filter(function (key) {\n              return key !== previousFocusedRoute.key;\n            });\n            replacingRouteKeys = replacingRouteKeys.filter(function (key) {\n              return key !== previousFocusedRoute.key;\n            });\n            routes = [].concat((0, _toConsumableArray2.default)(routes), [previousFocusedRoute]);\n          }\n        } else {}\n      } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n        var _routes2;\n        routes = routes.slice();\n        (_routes2 = routes).splice.apply(_routes2, [routes.length - 1, 0].concat((0, _toConsumableArray2.default)(state.routes.filter(function (_ref) {\n          var key = _ref.key;\n          return isAnimationEnabled(key) ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key) : false;\n        }))));\n      }\n      if (!routes.length) {\n        throw new Error('There should always be at least one route in the navigation state.');\n      }\n      var descriptors = routes.reduce(function (acc, route) {\n        acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];\n        return acc;\n      }, {});\n      return {\n        routes: routes,\n        previousRoutes: props.state.routes,\n        previousDescriptors: props.descriptors,\n        openingRouteKeys: openingRouteKeys,\n        closingRouteKeys: closingRouteKeys,\n        replacingRouteKeys: replacingRouteKeys,\n        descriptors: descriptors\n      };\n    }\n  }]);\n  return StackView;\n}(React.Component);\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"names":["_elements","require","_native","React","_interopRequireWildcard","_reactNative","_reactNativeSafeAreaContext","_ModalPresentationContext","_interopRequireDefault","_GestureHandler","_HeaderContainer","_CardStack","_excluded","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","result","NewTarget","constructor","Reflect","construct","arguments","apply","_possibleConstructorReturn2","sham","Proxy","Boolean","valueOf","e","GestureHandlerWrapper","GestureHandlerRootView","View","isArrayEqual","a","b","length","every","it","index","StackView","exports","_React$Component","_inherits2","_super","_this","_classCallCheck2","_len","args","Array","_key","concat","state","routes","previousRoutes","previousDescriptors","openingRouteKeys","closingRouteKeys","replacingRouteKeys","descriptors","getPreviousRoute","_ref2","route","_this$state","filter","r","includes","findIndex","renderScene","_ref3","descriptor","props","render","renderHeader","createElement","HeaderContainer","handleOpenRoute","_ref4","_this$props","navigation","_this$state2","some","routeNames","name","navigate","setState","handleCloseRoute","_ref5","_this$props2","dispatch","assign","StackActions","pop","source","target","handleTransitionStart","_ref6","closing","emit","type","data","handleTransitionEnd","_ref7","handleGestureStart","_ref8","handleGestureEnd","_ref9","handleGestureCancel","_ref10","_createClass2","value","_this2","_this$props3","_","rest","_objectWithoutProperties2","_this$state3","style","styles","container","SafeAreaProviderCompat","SafeAreaInsetsContext","Consumer","insets","ModalPresentationContext","isParentModal","HeaderShownContext","isParentHeaderShown","CardStack","_extends","onOpenRoute","onCloseRoute","onTransitionStart","onTransitionEnd","onGestureStart","onGestureEnd","onGestureCancel","getDerivedStateFromProps","map","reduce","acc","slice","previousFocusedRoute","nextFocusedRoute","isAnimationEnabled","options","animationEnabled","getAnimationTypeForReplace","_descriptor$options$a","animationTypeForReplace","_toConsumableArray2","splice","_routes2","_ref","Error","Component","StyleSheet","create","flex"],"sources":["C:\\Users\\erick_ribeiro-souza\\Desktop\\s.a 2\\sa.ReactNative2semestre-1\\node_modules\\@react-navigation\\stack\\src\\views\\Stack\\StackView.tsx"],"sourcesContent":["import {\n  HeaderShownContext,\n  SafeAreaProviderCompat,\n} from '@react-navigation/elements';\nimport {\n  ParamListBase,\n  Route,\n  StackActions,\n  StackNavigationState,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport {\n  EdgeInsets,\n  SafeAreaInsetsContext,\n} from 'react-native-safe-area-context';\n\nimport type {\n  StackDescriptorMap,\n  StackNavigationConfig,\n  StackNavigationHelpers,\n} from '../../types';\nimport ModalPresentationContext from '../../utils/ModalPresentationContext';\nimport { GestureHandlerRootView } from '../GestureHandler';\nimport HeaderContainer, {\n  Props as HeaderContainerProps,\n} from '../Header/HeaderContainer';\nimport CardStack from './CardStack';\n\ntype Props = StackNavigationConfig & {\n  state: StackNavigationState<ParamListBase>;\n  navigation: StackNavigationHelpers;\n  descriptors: StackDescriptorMap;\n};\n\ntype State = {\n  // Local copy of the routes which are actually rendered\n  routes: Route<string>[];\n  // Previous routes, to compare whether routes have changed or not\n  previousRoutes: Route<string>[];\n  // Previous descriptors, to compare whether descriptors have changed or not\n  previousDescriptors: StackDescriptorMap;\n  // List of routes being opened, we need to animate pushing of these new routes\n  openingRouteKeys: string[];\n  // List of routes being closed, we need to animate popping of these routes\n  closingRouteKeys: string[];\n  // List of routes being replaced, we need to keep a copy until the new route animates in\n  replacingRouteKeys: string[];\n  // Since the local routes can vary from the routes from props, we need to keep the descriptors for old routes\n  // Otherwise we won't be able to access the options for routes that were removed\n  descriptors: StackDescriptorMap;\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Compare two arrays with primitive values as the content.\n * We need to make sure that both values and order match.\n */\nconst isArrayEqual = (a: any[], b: any[]) =>\n  a.length === b.length && a.every((it, index) => it === b[index]);\n\nexport default class StackView extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Readonly<Props>,\n    state: Readonly<State>\n  ) {\n    // If there was no change in routes, we don't need to compute anything\n    if (\n      (props.state.routes === state.previousRoutes ||\n        isArrayEqual(\n          props.state.routes.map((r) => r.key),\n          state.previousRoutes.map((r) => r.key)\n        )) &&\n      state.routes.length\n    ) {\n      let routes = state.routes;\n      let previousRoutes = state.previousRoutes;\n      let descriptors = props.descriptors;\n      let previousDescriptors = state.previousDescriptors;\n\n      if (props.descriptors !== state.previousDescriptors) {\n        descriptors = state.routes.reduce<StackDescriptorMap>((acc, route) => {\n          acc[route.key] =\n            props.descriptors[route.key] || state.descriptors[route.key];\n\n          return acc;\n        }, {});\n\n        previousDescriptors = props.descriptors;\n      }\n\n      if (props.state.routes !== state.previousRoutes) {\n        // if any route objects have changed, we should update them\n        const map = props.state.routes.reduce<Record<string, Route<string>>>(\n          (acc, route) => {\n            acc[route.key] = route;\n            return acc;\n          },\n          {}\n        );\n\n        routes = state.routes.map((route) => map[route.key] || route);\n        previousRoutes = props.state.routes;\n      }\n\n      return {\n        routes,\n        previousRoutes,\n        descriptors,\n        previousDescriptors,\n      };\n    }\n\n    // Here we determine which routes were added or removed to animate them\n    // We keep a copy of the route being removed in local state to be able to animate it\n\n    let routes =\n      props.state.index < props.state.routes.length - 1\n        ? // Remove any extra routes from the state\n          // The last visible route should be the focused route, i.e. at current index\n          props.state.routes.slice(0, props.state.index + 1)\n        : props.state.routes;\n\n    // Now we need to determine which routes were added and removed\n    let {\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      previousRoutes,\n    } = state;\n\n    const previousFocusedRoute = previousRoutes[previousRoutes.length - 1] as\n      | Route<string>\n      | undefined;\n    const nextFocusedRoute = routes[routes.length - 1];\n\n    const isAnimationEnabled = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor ? descriptor.options.animationEnabled !== false : true;\n    };\n\n    const getAnimationTypeForReplace = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor.options.animationTypeForReplace ?? 'push';\n    };\n\n    if (\n      previousFocusedRoute &&\n      previousFocusedRoute.key !== nextFocusedRoute.key\n    ) {\n      // We only need to animate routes if the focused route changed\n      // Animating previous routes won't be visible coz the focused route is on top of everything\n\n      if (!previousRoutes.some((r) => r.key === nextFocusedRoute.key)) {\n        // A new route has come to the focus, we treat this as a push\n        // A replace can also trigger this, the animation should look like push\n\n        if (\n          isAnimationEnabled(nextFocusedRoute.key) &&\n          !openingRouteKeys.includes(nextFocusedRoute.key)\n        ) {\n          // In this case, we need to animate pushing the focused route\n          // We don't care about animating any other added routes because they won't be visible\n          openingRouteKeys = [...openingRouteKeys, nextFocusedRoute.key];\n\n          closingRouteKeys = closingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n\n          if (!routes.some((r) => r.key === previousFocusedRoute.key)) {\n            // The previous focused route isn't present in state, we treat this as a replace\n\n            openingRouteKeys = openingRouteKeys.filter(\n              (key) => key !== previousFocusedRoute.key\n            );\n\n            if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n              closingRouteKeys = [\n                ...closingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              // By default, new routes have a push animation, so we add it to `openingRouteKeys` before\n              // But since user configured it to animate the old screen like a pop, we need to add this without animation\n              // So remove it from `openingRouteKeys` which will remove the animation\n              openingRouteKeys = openingRouteKeys.filter(\n                (key) => key !== nextFocusedRoute.key\n              );\n\n              // Keep the route being removed at the end to animate it out\n              routes = [...routes, previousFocusedRoute];\n            } else {\n              replacingRouteKeys = [\n                ...replacingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              closingRouteKeys = closingRouteKeys.filter(\n                (key) => key !== previousFocusedRoute.key\n              );\n\n              // Keep the old route in the state because it's visible under the new route, and removing it will feel abrupt\n              // We need to insert it just before the focused one (the route being pushed)\n              // After the push animation is completed, routes being replaced will be removed completely\n              routes = routes.slice();\n              routes.splice(routes.length - 1, 0, previousFocusedRoute);\n            }\n          }\n        }\n      } else if (!routes.some((r) => r.key === previousFocusedRoute.key)) {\n        // The previously focused route was removed, we treat this as a pop\n\n        if (\n          isAnimationEnabled(previousFocusedRoute.key) &&\n          !closingRouteKeys.includes(previousFocusedRoute.key)\n        ) {\n          closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key];\n\n          // Sometimes a route can be closed before the opening animation finishes\n          // So we also need to remove it from the opening list\n          openingRouteKeys = openingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n\n          // Keep a copy of route being removed in the state to be able to animate it\n          routes = [...routes, previousFocusedRoute];\n        }\n      } else {\n        // Looks like some routes were re-arranged and no focused routes were added/removed\n        // i.e. the currently focused route already existed and the previously focused route still exists\n        // We don't know how to animate this\n      }\n    } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n      // Keep the routes we are closing or replacing if animation is enabled for them\n      routes = routes.slice();\n      routes.splice(\n        routes.length - 1,\n        0,\n        ...state.routes.filter(({ key }) =>\n          isAnimationEnabled(key)\n            ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key)\n            : false\n        )\n      );\n    }\n\n    if (!routes.length) {\n      throw new Error(\n        'There should always be at least one route in the navigation state.'\n      );\n    }\n\n    const descriptors = routes.reduce<StackDescriptorMap>((acc, route) => {\n      acc[route.key] =\n        props.descriptors[route.key] || state.descriptors[route.key];\n\n      return acc;\n    }, {});\n\n    return {\n      routes,\n      previousRoutes: props.state.routes,\n      previousDescriptors: props.descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      descriptors,\n    };\n  }\n\n  state: State = {\n    routes: [],\n    previousRoutes: [],\n    previousDescriptors: {},\n    openingRouteKeys: [],\n    closingRouteKeys: [],\n    replacingRouteKeys: [],\n    descriptors: {},\n  };\n\n  private getPreviousRoute = ({ route }: { route: Route<string> }) => {\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n    const routes = this.state.routes.filter(\n      (r) =>\n        r.key === route.key ||\n        (!closingRouteKeys.includes(r.key) &&\n          !replacingRouteKeys.includes(r.key))\n    );\n\n    const index = routes.findIndex((r) => r.key === route.key);\n\n    return routes[index - 1];\n  };\n\n  private renderScene = ({ route }: { route: Route<string> }) => {\n    const descriptor =\n      this.state.descriptors[route.key] || this.props.descriptors[route.key];\n\n    if (!descriptor) {\n      return null;\n    }\n\n    return descriptor.render();\n  };\n\n  private renderHeader = (props: HeaderContainerProps) => {\n    return <HeaderContainer {...props} />;\n  };\n\n  private handleOpenRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n\n    if (\n      closingRouteKeys.some((key) => key === route.key) &&\n      replacingRouteKeys.every((key) => key !== route.key) &&\n      state.routeNames.includes(route.name) &&\n      !state.routes.some((r) => r.key === route.key)\n    ) {\n      // If route isn't present in current state, but was closing, assume that a close animation was cancelled\n      // So we need to add this route back to the state\n      navigation.navigate(route);\n    } else {\n      this.setState((state) => ({\n        routes: state.replacingRouteKeys.length\n          ? state.routes.filter(\n              (r) => !state.replacingRouteKeys.includes(r.key)\n            )\n          : state.routes,\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        replacingRouteKeys: [],\n      }));\n    }\n  };\n\n  private handleCloseRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n\n    if (state.routes.some((r) => r.key === route.key)) {\n      // If a route exists in state, trigger a pop\n      // This will happen in when the route was closed from the card component\n      // e.g. When the close animation triggered from a gesture ends\n      navigation.dispatch({\n        ...StackActions.pop(),\n        source: route.key,\n        target: state.key,\n      });\n    } else {\n      // We need to clean up any state tracking the route and pop it immediately\n      this.setState((state) => ({\n        routes: state.routes.filter((r) => r.key !== route.key),\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n      }));\n    }\n  };\n\n  private handleTransitionStart = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) =>\n    this.props.navigation.emit({\n      type: 'transitionStart',\n      data: { closing },\n      target: route.key,\n    });\n\n  private handleTransitionEnd = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) =>\n    this.props.navigation.emit({\n      type: 'transitionEnd',\n      data: { closing },\n      target: route.key,\n    });\n\n  private handleGestureStart = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureStart',\n      target: route.key,\n    });\n  };\n\n  private handleGestureEnd = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureEnd',\n      target: route.key,\n    });\n  };\n\n  private handleGestureCancel = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureCancel',\n      target: route.key,\n    });\n  };\n\n  render() {\n    const {\n      state,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      descriptors: _,\n      ...rest\n    } = this.props;\n\n    const { routes, descriptors, openingRouteKeys, closingRouteKeys } =\n      this.state;\n\n    return (\n      <GestureHandlerWrapper style={styles.container}>\n        <SafeAreaProviderCompat>\n          <SafeAreaInsetsContext.Consumer>\n            {(insets) => (\n              <ModalPresentationContext.Consumer>\n                {(isParentModal) => (\n                  <HeaderShownContext.Consumer>\n                    {(isParentHeaderShown) => (\n                      <CardStack\n                        insets={insets as EdgeInsets}\n                        isParentHeaderShown={isParentHeaderShown}\n                        isParentModal={isParentModal}\n                        getPreviousRoute={this.getPreviousRoute}\n                        routes={routes}\n                        openingRouteKeys={openingRouteKeys}\n                        closingRouteKeys={closingRouteKeys}\n                        onOpenRoute={this.handleOpenRoute}\n                        onCloseRoute={this.handleCloseRoute}\n                        onTransitionStart={this.handleTransitionStart}\n                        onTransitionEnd={this.handleTransitionEnd}\n                        renderHeader={this.renderHeader}\n                        renderScene={this.renderScene}\n                        state={state}\n                        descriptors={descriptors}\n                        onGestureStart={this.handleGestureStart}\n                        onGestureEnd={this.handleGestureEnd}\n                        onGestureCancel={this.handleGestureCancel}\n                        {...rest}\n                      />\n                    )}\n                  </HeaderShownContext.Consumer>\n                )}\n              </ModalPresentationContext.Consumer>\n            )}\n          </SafeAreaInsetsContext.Consumer>\n        </SafeAreaProviderCompat>\n      </GestureHandlerWrapper>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}