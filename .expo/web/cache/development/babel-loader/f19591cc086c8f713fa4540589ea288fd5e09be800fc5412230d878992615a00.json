{"ast":null,"code":"import * as React from 'react';\nimport * as ResponderSystem from \"./ResponderSystem\";\nvar emptyObject = {};\nvar idCounter = 0;\nfunction useStable(getInitialValue) {\n  var ref = React.useRef(null);\n  if (ref.current == null) {\n    ref.current = getInitialValue();\n  }\n  return ref.current;\n}\nexport default function useResponderEvents(hostRef) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : emptyObject;\n  var id = useStable(function () {\n    return idCounter++;\n  });\n  var isAttachedRef = React.useRef(false);\n  React.useEffect(function () {\n    ResponderSystem.attachListeners();\n    return function () {\n      ResponderSystem.removeNode(id);\n    };\n  }, [id]);\n  React.useEffect(function () {\n    var onMoveShouldSetResponder = config.onMoveShouldSetResponder,\n      onMoveShouldSetResponderCapture = config.onMoveShouldSetResponderCapture,\n      onScrollShouldSetResponder = config.onScrollShouldSetResponder,\n      onScrollShouldSetResponderCapture = config.onScrollShouldSetResponderCapture,\n      onSelectionChangeShouldSetResponder = config.onSelectionChangeShouldSetResponder,\n      onSelectionChangeShouldSetResponderCapture = config.onSelectionChangeShouldSetResponderCapture,\n      onStartShouldSetResponder = config.onStartShouldSetResponder,\n      onStartShouldSetResponderCapture = config.onStartShouldSetResponderCapture;\n    var requiresResponderSystem = onMoveShouldSetResponder != null || onMoveShouldSetResponderCapture != null || onScrollShouldSetResponder != null || onScrollShouldSetResponderCapture != null || onSelectionChangeShouldSetResponder != null || onSelectionChangeShouldSetResponderCapture != null || onStartShouldSetResponder != null || onStartShouldSetResponderCapture != null;\n    var node = hostRef.current;\n    if (requiresResponderSystem) {\n      ResponderSystem.addNode(id, node, config);\n      isAttachedRef.current = true;\n    } else if (isAttachedRef.current) {\n      ResponderSystem.removeNode(id);\n      isAttachedRef.current = false;\n    }\n  }, [config, hostRef, id]);\n  React.useDebugValue({\n    isResponder: hostRef.current === ResponderSystem.getResponderNode()\n  });\n  React.useDebugValue(config);\n}","map":{"version":3,"names":["React","ResponderSystem","emptyObject","idCounter","useStable","getInitialValue","ref","useRef","current","useResponderEvents","hostRef","config","arguments","length","undefined","id","isAttachedRef","useEffect","attachListeners","removeNode","onMoveShouldSetResponder","onMoveShouldSetResponderCapture","onScrollShouldSetResponder","onScrollShouldSetResponderCapture","onSelectionChangeShouldSetResponder","onSelectionChangeShouldSetResponderCapture","onStartShouldSetResponder","onStartShouldSetResponderCapture","requiresResponderSystem","node","addNode","useDebugValue","isResponder","getResponderNode"],"sources":["C:/xando/sa/sa.ReactNative2semestre/node_modules/react-native-web/src/modules/useResponderEvents/index.js"],"sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/**\n * Hook for integrating the Responder System into React\n *\n *   function SomeComponent({ onStartShouldSetResponder }) {\n *     const ref = useRef(null);\n *     useResponderEvents(ref, { onStartShouldSetResponder });\n *     return <div ref={ref} />\n *   }\n */\n\nimport type { ResponderConfig } from './ResponderSystem';\n\nimport * as React from 'react';\nimport * as ResponderSystem from './ResponderSystem';\n\nconst emptyObject = {};\nlet idCounter = 0;\n\nfunction useStable<T>(getInitialValue: () => T): T {\n  const ref = React.useRef<T | null>(null);\n  if (ref.current == null) {\n    ref.current = getInitialValue();\n  }\n  return ref.current;\n}\n\nexport default function useResponderEvents(\n  hostRef: any,\n  config: ResponderConfig = emptyObject\n) {\n  const id = useStable(() => idCounter++);\n  const isAttachedRef = React.useRef(false);\n\n  // This is a separate effects so it doesn't run when the config changes.\n  // On initial mount, attach global listeners if needed.\n  // On unmount, remove node potentially attached to the Responder System.\n  React.useEffect(() => {\n    ResponderSystem.attachListeners();\n    return () => {\n      ResponderSystem.removeNode(id);\n    };\n  }, [id]);\n\n  // Register and unregister with the Responder System as necessary\n  React.useEffect(() => {\n    const {\n      onMoveShouldSetResponder,\n      onMoveShouldSetResponderCapture,\n      onScrollShouldSetResponder,\n      onScrollShouldSetResponderCapture,\n      onSelectionChangeShouldSetResponder,\n      onSelectionChangeShouldSetResponderCapture,\n      onStartShouldSetResponder,\n      onStartShouldSetResponderCapture\n    } = config;\n\n    const requiresResponderSystem =\n      onMoveShouldSetResponder != null ||\n      onMoveShouldSetResponderCapture != null ||\n      onScrollShouldSetResponder != null ||\n      onScrollShouldSetResponderCapture != null ||\n      onSelectionChangeShouldSetResponder != null ||\n      onSelectionChangeShouldSetResponderCapture != null ||\n      onStartShouldSetResponder != null ||\n      onStartShouldSetResponderCapture != null;\n\n    const node = hostRef.current;\n\n    if (requiresResponderSystem) {\n      ResponderSystem.addNode(id, node, config);\n      isAttachedRef.current = true;\n    } else if (isAttachedRef.current) {\n      ResponderSystem.removeNode(id);\n      isAttachedRef.current = false;\n    }\n  }, [config, hostRef, id]);\n\n  React.useDebugValue({\n    isResponder: hostRef.current === ResponderSystem.getResponderNode()\n  });\n  React.useDebugValue(config);\n}\n"],"mappings":"AAqBA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAO,KAAKC,eAAe;AAE3B,IAAMC,WAAW,GAAG,CAAC,CAAC;AACtB,IAAIC,SAAS,GAAG,CAAC;AAEjB,SAASC,SAASA,CAAIC,eAAwB,EAAK;EACjD,IAAMC,GAAG,GAAGN,KAAK,CAACO,MAAM,CAAW,IAAI,CAAC;EACxC,IAAID,GAAG,CAACE,OAAO,IAAI,IAAI,EAAE;IACvBF,GAAG,CAACE,OAAO,GAAGH,eAAe,CAAC,CAAC;EACjC;EACA,OAAOC,GAAG,CAACE,OAAO;AACpB;AAEA,eAAe,SAASC,kBAAkBA,CACxCC,OAAY,EAEZ;EAAA,IADAC,MAAuB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGV,WAAW;EAErC,IAAMa,EAAE,GAAGX,SAAS,CAAC;IAAA,OAAMD,SAAS,EAAE;EAAA,EAAC;EACvC,IAAMa,aAAa,GAAGhB,KAAK,CAACO,MAAM,CAAC,KAAK,CAAC;EAKzCP,KAAK,CAACiB,SAAS,CAAC,YAAM;IACpBhB,eAAe,CAACiB,eAAe,CAAC,CAAC;IACjC,OAAO,YAAM;MACXjB,eAAe,CAACkB,UAAU,CAACJ,EAAE,CAAC;IAChC,CAAC;EACH,CAAC,EAAE,CAACA,EAAE,CAAC,CAAC;EAGRf,KAAK,CAACiB,SAAS,CAAC,YAAM;IACpB,IACEG,wBAAwB,GAQtBT,MAAM,CARRS,wBAAwB;MACxBC,+BAA+B,GAO7BV,MAAM,CAPRU,+BAA+B;MAC/BC,0BAA0B,GAMxBX,MAAM,CANRW,0BAA0B;MAC1BC,iCAAiC,GAK/BZ,MAAM,CALRY,iCAAiC;MACjCC,mCAAmC,GAIjCb,MAAM,CAJRa,mCAAmC;MACnCC,0CAA0C,GAGxCd,MAAM,CAHRc,0CAA0C;MAC1CC,yBAAyB,GAEvBf,MAAM,CAFRe,yBAAyB;MACzBC,gCAAgC,GAC9BhB,MAAM,CADRgB,gCAAgC;IAGlC,IAAMC,uBAAuB,GAC3BR,wBAAwB,IAAI,IAAI,IAChCC,+BAA+B,IAAI,IAAI,IACvCC,0BAA0B,IAAI,IAAI,IAClCC,iCAAiC,IAAI,IAAI,IACzCC,mCAAmC,IAAI,IAAI,IAC3CC,0CAA0C,IAAI,IAAI,IAClDC,yBAAyB,IAAI,IAAI,IACjCC,gCAAgC,IAAI,IAAI;IAE1C,IAAME,IAAI,GAAGnB,OAAO,CAACF,OAAO;IAE5B,IAAIoB,uBAAuB,EAAE;MAC3B3B,eAAe,CAAC6B,OAAO,CAACf,EAAE,EAAEc,IAAI,EAAElB,MAAM,CAAC;MACzCK,aAAa,CAACR,OAAO,GAAG,IAAI;IAC9B,CAAC,MAAM,IAAIQ,aAAa,CAACR,OAAO,EAAE;MAChCP,eAAe,CAACkB,UAAU,CAACJ,EAAE,CAAC;MAC9BC,aAAa,CAACR,OAAO,GAAG,KAAK;IAC/B;EACF,CAAC,EAAE,CAACG,MAAM,EAAED,OAAO,EAAEK,EAAE,CAAC,CAAC;EAEzBf,KAAK,CAAC+B,aAAa,CAAC;IAClBC,WAAW,EAAEtB,OAAO,CAACF,OAAO,KAAKP,eAAe,CAACgC,gBAAgB,CAAC;EACpE,CAAC,CAAC;EACFjC,KAAK,CAAC+B,aAAa,CAACpB,MAAM,CAAC;AAC7B"},"metadata":{},"sourceType":"module","externalDependencies":[]}