{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _elements = require(\"@react-navigation/elements\");\nvar _color = _interopRequireDefault(require(\"color\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _CardStyleInterpolators = require(\"../../TransitionConfigs/CardStyleInterpolators\");\nvar _TransitionPresets = require(\"../../TransitionConfigs/TransitionPresets\");\nvar _findLastIndex = _interopRequireDefault(require(\"../../utils/findLastIndex\"));\nvar _getDistanceForDirection = _interopRequireDefault(require(\"../../utils/getDistanceForDirection\"));\nvar _Screens = require(\"../Screens\");\nvar _Card = require(\"./Card\");\nvar _CardContainer = _interopRequireDefault(require(\"./CardContainer\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nvar EPSILON = 1e-5;\nvar STATE_INACTIVE = 0;\nvar STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nvar STATE_ON_TOP = 2;\nvar FALLBACK_DESCRIPTOR = Object.freeze({\n  options: {}\n});\nvar getInterpolationIndex = function getInterpolationIndex(scenes, index) {\n  var cardStyleInterpolator = scenes[index].descriptor.options.cardStyleInterpolator;\n  var interpolationIndex = 0;\n  for (var i = index - 1; i >= 0; i--) {\n    var _scenes$i;\n    var cardStyleInterpolatorCurrent = (_scenes$i = scenes[i]) === null || _scenes$i === void 0 ? void 0 : _scenes$i.descriptor.options.cardStyleInterpolator;\n    if (cardStyleInterpolatorCurrent !== cardStyleInterpolator) {\n      break;\n    }\n    interpolationIndex++;\n  }\n  return interpolationIndex;\n};\nvar getIsModal = function getIsModal(scene, interpolationIndex, isParentModal) {\n  if (isParentModal) {\n    return true;\n  }\n  var cardStyleInterpolator = scene.descriptor.options.cardStyleInterpolator;\n  var isModalPresentation = (0, _Card.getIsModalPresentation)(cardStyleInterpolator);\n  var isModal = isModalPresentation && interpolationIndex !== 0;\n  return isModal;\n};\nvar getHeaderHeights = function getHeaderHeights(scenes, insets, isParentHeaderShown, isParentModal, layout, previous) {\n  return scenes.reduce(function (acc, curr, index) {\n    var _curr$descriptor$opti = curr.descriptor.options,\n      _curr$descriptor$opti2 = _curr$descriptor$opti.headerStatusBarHeight,\n      headerStatusBarHeight = _curr$descriptor$opti2 === void 0 ? isParentHeaderShown ? 0 : insets.top : _curr$descriptor$opti2,\n      headerStyle = _curr$descriptor$opti.headerStyle;\n    var style = _reactNative.StyleSheet.flatten(headerStyle || {});\n    var height = 'height' in style && typeof style.height === 'number' ? style.height : previous[curr.route.key];\n    var interpolationIndex = getInterpolationIndex(scenes, index);\n    var isModal = getIsModal(curr, interpolationIndex, isParentModal);\n    acc[curr.route.key] = typeof height === 'number' ? height : (0, _elements.getDefaultHeaderHeight)(layout, isModal, headerStatusBarHeight);\n    return acc;\n  }, {});\n};\nvar getDistanceFromOptions = function getDistanceFromOptions(layout, descriptor) {\n  var _ref4 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n    presentation = _ref4.presentation,\n    _ref4$gestureDirectio = _ref4.gestureDirection,\n    gestureDirection = _ref4$gestureDirectio === void 0 ? presentation === 'modal' ? _TransitionPresets.ModalTransition.gestureDirection : _TransitionPresets.DefaultTransition.gestureDirection : _ref4$gestureDirectio;\n  return (0, _getDistanceForDirection.default)(layout, gestureDirection);\n};\nvar getProgressFromGesture = function getProgressFromGesture(gesture, layout, descriptor) {\n  var distance = getDistanceFromOptions({\n    width: Math.max(1, layout.width),\n    height: Math.max(1, layout.height)\n  }, descriptor);\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0]\n    });\n  }\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1]\n  });\n};\nvar CardStack = exports.default = function (_React$Component) {\n  (0, _inherits2.default)(CardStack, _React$Component);\n  var _super = _createSuper(CardStack);\n  function CardStack(_props) {\n    var _this;\n    (0, _classCallCheck2.default)(this, CardStack);\n    _this = _super.call(this, _props);\n    _this.handleLayout = function (e) {\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n        height = _e$nativeEvent$layout.height,\n        width = _e$nativeEvent$layout.width;\n      var layout = {\n        width: width,\n        height: height\n      };\n      _this.setState(function (state, props) {\n        if (height === state.layout.height && width === state.layout.width) {\n          return null;\n        }\n        return {\n          layout: layout,\n          headerHeights: getHeaderHeights(state.scenes, props.insets, props.isParentHeaderShown, props.isParentModal, layout, state.headerHeights)\n        };\n      });\n    };\n    _this.handleHeaderLayout = function (_ref) {\n      var route = _ref.route,\n        height = _ref.height;\n      _this.setState(function (_ref2) {\n        var headerHeights = _ref2.headerHeights;\n        var previousHeight = headerHeights[route.key];\n        if (previousHeight === height) {\n          return null;\n        }\n        return {\n          headerHeights: Object.assign({}, headerHeights, (0, _defineProperty2.default)({}, route.key, height))\n        };\n      });\n    };\n    _this.getFocusedRoute = function () {\n      var state = _this.props.state;\n      return state.routes[state.index];\n    };\n    _this.getPreviousScene = function (_ref3) {\n      var route = _ref3.route;\n      var getPreviousRoute = _this.props.getPreviousRoute;\n      var scenes = _this.state.scenes;\n      var previousRoute = getPreviousRoute({\n        route: route\n      });\n      if (previousRoute) {\n        var previousScene = scenes.find(function (scene) {\n          return scene.descriptor.route.key === previousRoute.key;\n        });\n        return previousScene;\n      }\n      return undefined;\n    };\n    _this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: _elements.SafeAreaProviderCompat.initialMetrics.frame,\n      descriptors: _this.props.descriptors,\n      headerHeights: {}\n    };\n    return _this;\n  }\n  (0, _createClass2.default)(CardStack, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$props = this.props,\n        insets = _this$props.insets,\n        state = _this$props.state,\n        routes = _this$props.routes,\n        closingRouteKeys = _this$props.closingRouteKeys,\n        onOpenRoute = _this$props.onOpenRoute,\n        onCloseRoute = _this$props.onCloseRoute,\n        renderHeader = _this$props.renderHeader,\n        renderScene = _this$props.renderScene,\n        isParentHeaderShown = _this$props.isParentHeaderShown,\n        isParentModal = _this$props.isParentModal,\n        onTransitionStart = _this$props.onTransitionStart,\n        onTransitionEnd = _this$props.onTransitionEnd,\n        onGestureStart = _this$props.onGestureStart,\n        onGestureEnd = _this$props.onGestureEnd,\n        onGestureCancel = _this$props.onGestureCancel,\n        _this$props$detachIna = _this$props.detachInactiveScreens,\n        detachInactiveScreens = _this$props$detachIna === void 0 ? _reactNative.Platform.OS === 'web' || _reactNative.Platform.OS === 'android' || _reactNative.Platform.OS === 'ios' : _this$props$detachIna;\n      var _this$state = this.state,\n        scenes = _this$state.scenes,\n        layout = _this$state.layout,\n        gestures = _this$state.gestures,\n        headerHeights = _this$state.headerHeights;\n      var focusedRoute = state.routes[state.index];\n      var focusedHeaderHeight = headerHeights[focusedRoute.key];\n      var isFloatHeaderAbsolute = this.state.scenes.slice(-2).some(function (scene) {\n        var _scene$descriptor$opt;\n        var options = (_scene$descriptor$opt = scene.descriptor.options) != null ? _scene$descriptor$opt : {};\n        var headerMode = options.headerMode,\n          headerTransparent = options.headerTransparent,\n          _options$headerShown = options.headerShown,\n          headerShown = _options$headerShown === void 0 ? true : _options$headerShown;\n        if (headerTransparent || headerShown === false || headerMode === 'screen') {\n          return true;\n        }\n        return false;\n      });\n      var activeScreensLimit = 1;\n      for (var i = scenes.length - 1; i >= 0; i--) {\n        var options = scenes[i].descriptor.options;\n        var _options$detachPrevio = options.detachPreviousScreen,\n          detachPreviousScreen = _options$detachPrevio === void 0 ? options.presentation === 'transparentModal' ? false : (0, _Card.getIsModalPresentation)(options.cardStyleInterpolator) ? i !== (0, _findLastIndex.default)(scenes, function (scene) {\n            var cardStyleInterpolator = scene.descriptor.options.cardStyleInterpolator;\n            return cardStyleInterpolator === _CardStyleInterpolators.forModalPresentationIOS || (cardStyleInterpolator === null || cardStyleInterpolator === void 0 ? void 0 : cardStyleInterpolator.name) === 'forModalPresentationIOS';\n          }) : true : _options$detachPrevio;\n        if (detachPreviousScreen === false) {\n          activeScreensLimit++;\n        } else {\n          if (i <= scenes.length - 2) {\n            break;\n          }\n        }\n      }\n      var floatingHeader = React.createElement(React.Fragment, {\n        key: \"header\"\n      }, renderHeader({\n        mode: 'float',\n        layout: layout,\n        scenes: scenes,\n        getPreviousScene: this.getPreviousScene,\n        getFocusedRoute: this.getFocusedRoute,\n        onContentHeightChange: this.handleHeaderLayout,\n        style: [styles.floating, isFloatHeaderAbsolute && [{\n          height: focusedHeaderHeight\n        }, styles.absolute]]\n      }));\n      return React.createElement(_elements.Background, null, isFloatHeaderAbsolute ? null : floatingHeader, React.createElement(_Screens.MaybeScreenContainer, {\n        enabled: detachInactiveScreens,\n        style: styles.container,\n        onLayout: this.handleLayout\n      }, routes.map(function (route, index, self) {\n        var _scenes, _scenes2;\n        var focused = focusedRoute.key === route.key;\n        var gesture = gestures[route.key];\n        var scene = scenes[index];\n        var isScreenActive = 1;\n        if (index < self.length - activeScreensLimit - 1) {\n          isScreenActive = STATE_INACTIVE;\n        } else {\n          var sceneForActivity = scenes[self.length - 1];\n          var outputValue = index === self.length - 1 ? STATE_ON_TOP : index >= self.length - activeScreensLimit ? STATE_TRANSITIONING_OR_BELOW_TOP : STATE_INACTIVE;\n          isScreenActive = sceneForActivity ? sceneForActivity.progress.current.interpolate({\n            inputRange: [0, 1 - EPSILON, 1],\n            outputRange: [1, 1, outputValue],\n            extrapolate: 'clamp'\n          }) : STATE_TRANSITIONING_OR_BELOW_TOP;\n        }\n        var _scene$descriptor$opt2 = scene.descriptor.options,\n          _scene$descriptor$opt3 = _scene$descriptor$opt2.headerShown,\n          headerShown = _scene$descriptor$opt3 === void 0 ? true : _scene$descriptor$opt3,\n          headerTransparent = _scene$descriptor$opt2.headerTransparent,\n          headerStyle = _scene$descriptor$opt2.headerStyle,\n          headerTintColor = _scene$descriptor$opt2.headerTintColor,\n          freezeOnBlur = _scene$descriptor$opt2.freezeOnBlur;\n        var safeAreaInsetTop = insets.top;\n        var safeAreaInsetRight = insets.right;\n        var safeAreaInsetBottom = insets.bottom;\n        var safeAreaInsetLeft = insets.left;\n        var headerHeight = headerShown !== false ? headerHeights[route.key] : 0;\n        var headerDarkContent;\n        if (headerShown) {\n          if (typeof headerTintColor === 'string') {\n            headerDarkContent = (0, _color.default)(headerTintColor).isDark();\n          } else {\n            var flattenedHeaderStyle = _reactNative.StyleSheet.flatten(headerStyle);\n            if (flattenedHeaderStyle && 'backgroundColor' in flattenedHeaderStyle && typeof flattenedHeaderStyle.backgroundColor === 'string') {\n              headerDarkContent = !(0, _color.default)(flattenedHeaderStyle.backgroundColor).isDark();\n            }\n          }\n        }\n        var interpolationIndex = getInterpolationIndex(scenes, index);\n        var isModal = getIsModal(scene, interpolationIndex, isParentModal);\n        var isNextScreenTransparent = ((_scenes = scenes[index + 1]) === null || _scenes === void 0 ? void 0 : _scenes.descriptor.options.presentation) === 'transparentModal';\n        var detachCurrentScreen = ((_scenes2 = scenes[index + 1]) === null || _scenes2 === void 0 ? void 0 : _scenes2.descriptor.options.detachPreviousScreen) !== false;\n        return React.createElement(_Screens.MaybeScreen, {\n          key: route.key,\n          style: _reactNative.StyleSheet.absoluteFill,\n          enabled: detachInactiveScreens,\n          active: isScreenActive,\n          freezeOnBlur: freezeOnBlur,\n          pointerEvents: \"box-none\"\n        }, React.createElement(_CardContainer.default, {\n          index: index,\n          interpolationIndex: interpolationIndex,\n          modal: isModal,\n          active: index === self.length - 1,\n          focused: focused,\n          closing: closingRouteKeys.includes(route.key),\n          layout: layout,\n          gesture: gesture,\n          scene: scene,\n          safeAreaInsetTop: safeAreaInsetTop,\n          safeAreaInsetRight: safeAreaInsetRight,\n          safeAreaInsetBottom: safeAreaInsetBottom,\n          safeAreaInsetLeft: safeAreaInsetLeft,\n          onGestureStart: onGestureStart,\n          onGestureCancel: onGestureCancel,\n          onGestureEnd: onGestureEnd,\n          headerHeight: headerHeight,\n          isParentHeaderShown: isParentHeaderShown,\n          onHeaderHeightChange: _this2.handleHeaderLayout,\n          getPreviousScene: _this2.getPreviousScene,\n          getFocusedRoute: _this2.getFocusedRoute,\n          headerDarkContent: headerDarkContent,\n          hasAbsoluteFloatHeader: isFloatHeaderAbsolute && !headerTransparent,\n          renderHeader: renderHeader,\n          renderScene: renderScene,\n          onOpenRoute: onOpenRoute,\n          onCloseRoute: onCloseRoute,\n          onTransitionStart: onTransitionStart,\n          onTransitionEnd: onTransitionEnd,\n          isNextScreenTransparent: isNextScreenTransparent,\n          detachCurrentScreen: detachCurrentScreen\n        }));\n      })), isFloatHeaderAbsolute ? floatingHeader : null);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (props.routes === state.routes && props.descriptors === state.descriptors) {\n        return null;\n      }\n      var gestures = props.routes.reduce(function (acc, curr) {\n        var descriptor = props.descriptors[curr.key];\n        var _ref5 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n          animationEnabled = _ref5.animationEnabled;\n        acc[curr.key] = state.gestures[curr.key] || new _reactNative.Animated.Value(props.openingRouteKeys.includes(curr.key) && animationEnabled !== false ? getDistanceFromOptions(state.layout, descriptor) : 0);\n        return acc;\n      }, {});\n      var scenes = props.routes.map(function (route, index, self) {\n        var _descriptor$options$h;\n        var previousRoute = self[index - 1];\n        var nextRoute = self[index + 1];\n        var oldScene = state.scenes[index];\n        var currentGesture = gestures[route.key];\n        var previousGesture = previousRoute ? gestures[previousRoute.key] : undefined;\n        var nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n        var descriptor = props.descriptors[route.key] || state.descriptors[route.key] || (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n        var nextDescriptor = props.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key] || state.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key];\n        var previousDescriptor = props.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key] || state.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key];\n        var optionsForTransitionConfig = index !== self.length - 1 && nextDescriptor && nextDescriptor.options.presentation !== 'transparentModal' ? nextDescriptor.options : descriptor.options;\n        var defaultTransitionPreset = optionsForTransitionConfig.presentation === 'modal' ? _TransitionPresets.ModalTransition : optionsForTransitionConfig.presentation === 'transparentModal' ? _TransitionPresets.ModalFadeTransition : _TransitionPresets.DefaultTransition;\n        var _optionsForTransition = optionsForTransitionConfig.animationEnabled,\n          animationEnabled = _optionsForTransition === void 0 ? _reactNative.Platform.OS !== 'web' && _reactNative.Platform.OS !== 'windows' && _reactNative.Platform.OS !== 'macos' : _optionsForTransition,\n          _optionsForTransition2 = optionsForTransitionConfig.gestureEnabled,\n          gestureEnabled = _optionsForTransition2 === void 0 ? _reactNative.Platform.OS === 'ios' && animationEnabled : _optionsForTransition2,\n          _optionsForTransition3 = optionsForTransitionConfig.gestureDirection,\n          gestureDirection = _optionsForTransition3 === void 0 ? defaultTransitionPreset.gestureDirection : _optionsForTransition3,\n          _optionsForTransition4 = optionsForTransitionConfig.transitionSpec,\n          transitionSpec = _optionsForTransition4 === void 0 ? defaultTransitionPreset.transitionSpec : _optionsForTransition4,\n          _optionsForTransition5 = optionsForTransitionConfig.cardStyleInterpolator,\n          cardStyleInterpolator = _optionsForTransition5 === void 0 ? animationEnabled === false ? _CardStyleInterpolators.forNoAnimation : defaultTransitionPreset.cardStyleInterpolator : _optionsForTransition5,\n          _optionsForTransition6 = optionsForTransitionConfig.headerStyleInterpolator,\n          headerStyleInterpolator = _optionsForTransition6 === void 0 ? defaultTransitionPreset.headerStyleInterpolator : _optionsForTransition6,\n          _optionsForTransition7 = optionsForTransitionConfig.cardOverlayEnabled,\n          cardOverlayEnabled = _optionsForTransition7 === void 0 ? _reactNative.Platform.OS !== 'ios' && optionsForTransitionConfig.presentation !== 'transparentModal' || (0, _Card.getIsModalPresentation)(cardStyleInterpolator) : _optionsForTransition7;\n        var headerMode = (_descriptor$options$h = descriptor.options.headerMode) != null ? _descriptor$options$h : !(optionsForTransitionConfig.presentation === 'modal' || optionsForTransitionConfig.presentation === 'transparentModal' || (nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.presentation) === 'modal' || (nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.presentation) === 'transparentModal' || (0, _Card.getIsModalPresentation)(cardStyleInterpolator)) && _reactNative.Platform.OS === 'ios' && descriptor.options.header === undefined ? 'float' : 'screen';\n        var scene = {\n          route: route,\n          descriptor: Object.assign({}, descriptor, {\n            options: Object.assign({}, descriptor.options, {\n              animationEnabled: animationEnabled,\n              cardOverlayEnabled: cardOverlayEnabled,\n              cardStyleInterpolator: cardStyleInterpolator,\n              gestureDirection: gestureDirection,\n              gestureEnabled: gestureEnabled,\n              headerStyleInterpolator: headerStyleInterpolator,\n              transitionSpec: transitionSpec,\n              headerMode: headerMode\n            })\n          }),\n          progress: {\n            current: getProgressFromGesture(currentGesture, state.layout, descriptor),\n            next: nextGesture && (nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.presentation) !== 'transparentModal' ? getProgressFromGesture(nextGesture, state.layout, nextDescriptor) : undefined,\n            previous: previousGesture ? getProgressFromGesture(previousGesture, state.layout, previousDescriptor) : undefined\n          },\n          __memo: [state.layout, descriptor, nextDescriptor, previousDescriptor, currentGesture, nextGesture, previousGesture]\n        };\n        if (oldScene && scene.__memo.every(function (it, i) {\n          return oldScene.__memo[i] === it;\n        })) {\n          return oldScene;\n        }\n        return scene;\n      });\n      return {\n        routes: props.routes,\n        scenes: scenes,\n        gestures: gestures,\n        descriptors: props.descriptors,\n        headerHeights: getHeaderHeights(scenes, props.insets, props.isParentHeaderShown, props.isParentModal, state.layout, state.headerHeights)\n      };\n    }\n  }]);\n  return CardStack;\n}(React.Component);\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  },\n  floating: {\n    zIndex: 1\n  }\n});","map":{"version":3,"names":["_elements","require","_color","_interopRequireDefault","React","_interopRequireWildcard","_reactNative","_CardStyleInterpolators","_TransitionPresets","_findLastIndex","_getDistanceForDirection","_Screens","_Card","_CardContainer","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","result","NewTarget","constructor","Reflect","construct","arguments","apply","_possibleConstructorReturn2","sham","Proxy","Boolean","valueOf","e","EPSILON","STATE_INACTIVE","STATE_TRANSITIONING_OR_BELOW_TOP","STATE_ON_TOP","FALLBACK_DESCRIPTOR","freeze","options","getInterpolationIndex","scenes","index","cardStyleInterpolator","descriptor","interpolationIndex","i","_scenes$i","cardStyleInterpolatorCurrent","getIsModal","scene","isParentModal","isModalPresentation","getIsModalPresentation","isModal","getHeaderHeights","insets","isParentHeaderShown","layout","previous","reduce","acc","curr","_curr$descriptor$opti","_curr$descriptor$opti2","headerStatusBarHeight","top","headerStyle","style","StyleSheet","flatten","height","route","getDefaultHeaderHeight","getDistanceFromOptions","_ref4","presentation","_ref4$gestureDirectio","gestureDirection","ModalTransition","DefaultTransition","getDistanceForDirection","getProgressFromGesture","gesture","distance","width","Math","max","interpolate","inputRange","outputRange","CardStack","exports","_React$Component","_inherits2","_super","props","_this","_classCallCheck2","handleLayout","_e$nativeEvent$layout","nativeEvent","setState","state","headerHeights","handleHeaderLayout","_ref","_ref2","previousHeight","assign","_defineProperty2","getFocusedRoute","routes","getPreviousScene","_ref3","getPreviousRoute","previousRoute","previousScene","find","undefined","gestures","SafeAreaProviderCompat","initialMetrics","frame","descriptors","_createClass2","value","render","_this2","_this$props","closingRouteKeys","onOpenRoute","onCloseRoute","renderHeader","renderScene","onTransitionStart","onTransitionEnd","onGestureStart","onGestureEnd","onGestureCancel","_this$props$detachIna","detachInactiveScreens","Platform","OS","_this$state","focusedRoute","focusedHeaderHeight","isFloatHeaderAbsolute","slice","some","_scene$descriptor$opt","headerMode","headerTransparent","_options$headerShown","headerShown","activeScreensLimit","length","_options$detachPrevio","detachPreviousScreen","findLastIndex","forModalPresentationIOS","name","floatingHeader","createElement","Fragment","mode","onContentHeightChange","styles","floating","absolute","Background","MaybeScreenContainer","enabled","container","onLayout","map","self","_scenes","_scenes2","focused","isScreenActive","sceneForActivity","outputValue","progress","current","extrapolate","_scene$descriptor$opt2","_scene$descriptor$opt3","headerTintColor","freezeOnBlur","safeAreaInsetTop","safeAreaInsetRight","right","safeAreaInsetBottom","bottom","safeAreaInsetLeft","left","headerHeight","headerDarkContent","Color","isDark","flattenedHeaderStyle","backgroundColor","isNextScreenTransparent","detachCurrentScreen","MaybeScreen","absoluteFill","active","pointerEvents","CardContainer","modal","closing","includes","onHeaderHeightChange","hasAbsoluteFloatHeader","getDerivedStateFromProps","_ref5","animationEnabled","Animated","Value","openingRouteKeys","_descriptor$options$h","nextRoute","oldScene","currentGesture","previousGesture","nextGesture","nextDescriptor","previousDescriptor","optionsForTransitionConfig","defaultTransitionPreset","ModalFadeTransition","_optionsForTransition","_optionsForTransition2","gestureEnabled","_optionsForTransition3","_optionsForTransition4","transitionSpec","_optionsForTransition5","forNoAnimationCard","_optionsForTransition6","headerStyleInterpolator","_optionsForTransition7","cardOverlayEnabled","header","next","__memo","every","it","Component","create","flex","position","zIndex"],"sources":["C:\\Users\\erick_ribeiro-souza\\Desktop\\s.a 2\\sa.ReactNative2semestre-1\\node_modules\\@react-navigation\\stack\\src\\views\\Stack\\CardStack.tsx"],"sourcesContent":["import {\n  Background,\n  getDefaultHeaderHeight,\n  SafeAreaProviderCompat,\n} from '@react-navigation/elements';\nimport type {\n  ParamListBase,\n  Route,\n  StackNavigationState,\n} from '@react-navigation/native';\nimport Color from 'color';\nimport * as React from 'react';\nimport {\n  Animated,\n  LayoutChangeEvent,\n  Platform,\n  StyleSheet,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\n\nimport {\n  forModalPresentationIOS,\n  forNoAnimation as forNoAnimationCard,\n} from '../../TransitionConfigs/CardStyleInterpolators';\nimport {\n  DefaultTransition,\n  ModalFadeTransition,\n  ModalTransition,\n} from '../../TransitionConfigs/TransitionPresets';\nimport type {\n  Layout,\n  Scene,\n  StackDescriptor,\n  StackDescriptorMap,\n  StackHeaderMode,\n  StackNavigationOptions,\n} from '../../types';\nimport findLastIndex from '../../utils/findLastIndex';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport { MaybeScreen, MaybeScreenContainer } from '../Screens';\nimport { getIsModalPresentation } from './Card';\nimport CardContainer from './CardContainer';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\ntype Props = {\n  insets: EdgeInsets;\n  state: StackNavigationState<ParamListBase>;\n  descriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  isParentHeaderShown: boolean;\n  isParentModal: boolean;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onGestureStart: (props: { route: Route<string> }) => void;\n  onGestureEnd: (props: { route: Route<string> }) => void;\n  onGestureCancel: (props: { route: Route<string> }) => void;\n  detachInactiveScreens?: boolean;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene[];\n  gestures: GestureValues;\n  layout: Layout;\n  headerHeights: Record<string, number>;\n};\n\nconst EPSILON = 1e-5;\n\nconst STATE_INACTIVE = 0;\nconst STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nconst STATE_ON_TOP = 2;\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getInterpolationIndex = (scenes: Scene[], index: number) => {\n  const { cardStyleInterpolator } = scenes[index].descriptor.options;\n\n  // Start from current card and count backwards the number of cards with same interpolation\n  let interpolationIndex = 0;\n\n  for (let i = index - 1; i >= 0; i--) {\n    const cardStyleInterpolatorCurrent =\n      scenes[i]?.descriptor.options.cardStyleInterpolator;\n\n    if (cardStyleInterpolatorCurrent !== cardStyleInterpolator) {\n      break;\n    }\n\n    interpolationIndex++;\n  }\n\n  return interpolationIndex;\n};\n\nconst getIsModal = (\n  scene: Scene,\n  interpolationIndex: number,\n  isParentModal: boolean\n) => {\n  if (isParentModal) {\n    return true;\n  }\n\n  const { cardStyleInterpolator } = scene.descriptor.options;\n  const isModalPresentation = getIsModalPresentation(cardStyleInterpolator);\n  const isModal = isModalPresentation && interpolationIndex !== 0;\n\n  return isModal;\n};\n\nconst getHeaderHeights = (\n  scenes: Scene[],\n  insets: EdgeInsets,\n  isParentHeaderShown: boolean,\n  isParentModal: boolean,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return scenes.reduce<Record<string, number>>((acc, curr, index) => {\n    const {\n      headerStatusBarHeight = isParentHeaderShown ? 0 : insets.top,\n      headerStyle,\n    } = curr.descriptor.options;\n\n    const style = StyleSheet.flatten(headerStyle || {});\n\n    const height =\n      'height' in style && typeof style.height === 'number'\n        ? style.height\n        : previous[curr.route.key];\n\n    const interpolationIndex = getInterpolationIndex(scenes, index);\n    const isModal = getIsModal(curr, interpolationIndex, isParentModal);\n\n    acc[curr.route.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, isModal, headerStatusBarHeight);\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const {\n    presentation,\n    gestureDirection = presentation === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection,\n  } = (descriptor?.options || {}) as StackNavigationOptions;\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nconst getProgressFromGesture = (\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const distance = getDistanceFromOptions(\n    {\n      // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n      // This causes blank screen on web if it was previously inside container with display: none\n      width: Math.max(1, layout.width),\n      height: Math.max(1, layout.height),\n    },\n    descriptor\n  );\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n  });\n};\n\nexport default class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Props,\n    state: State\n  ): Partial<State> | null {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const { animationEnabled } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          props.openingRouteKeys.includes(curr.key) &&\n          animationEnabled !== false\n            ? getDistanceFromOptions(state.layout, descriptor)\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    const scenes = props.routes.map((route, index, self) => {\n      const previousRoute = self[index - 1];\n      const nextRoute = self[index + 1];\n\n      const oldScene = state.scenes[index];\n\n      const currentGesture = gestures[route.key];\n      const previousGesture = previousRoute\n        ? gestures[previousRoute.key]\n        : undefined;\n      const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n      const descriptor =\n        props.descriptors[route.key] ||\n        state.descriptors[route.key] ||\n        (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n      const nextDescriptor =\n        props.descriptors[nextRoute?.key] || state.descriptors[nextRoute?.key];\n\n      const previousDescriptor =\n        props.descriptors[previousRoute?.key] ||\n        state.descriptors[previousRoute?.key];\n\n      // When a screen is not the last, it should use next screen's transition config\n      // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n      // For example combining a slide and a modal transition would look wrong otherwise\n      // With this approach, combining different transition styles in the same navigator mostly looks right\n      // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n      // but majority of the transitions look alright\n      const optionsForTransitionConfig =\n        index !== self.length - 1 &&\n        nextDescriptor &&\n        nextDescriptor.options.presentation !== 'transparentModal'\n          ? nextDescriptor.options\n          : descriptor.options;\n\n      let defaultTransitionPreset =\n        optionsForTransitionConfig.presentation === 'modal'\n          ? ModalTransition\n          : optionsForTransitionConfig.presentation === 'transparentModal'\n          ? ModalFadeTransition\n          : DefaultTransition;\n\n      const {\n        animationEnabled = Platform.OS !== 'web' &&\n          Platform.OS !== 'windows' &&\n          Platform.OS !== 'macos',\n        gestureEnabled = Platform.OS === 'ios' && animationEnabled,\n        gestureDirection = defaultTransitionPreset.gestureDirection,\n        transitionSpec = defaultTransitionPreset.transitionSpec,\n        cardStyleInterpolator = animationEnabled === false\n          ? forNoAnimationCard\n          : defaultTransitionPreset.cardStyleInterpolator,\n        headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n        cardOverlayEnabled = (Platform.OS !== 'ios' &&\n          optionsForTransitionConfig.presentation !== 'transparentModal') ||\n          getIsModalPresentation(cardStyleInterpolator),\n      } = optionsForTransitionConfig;\n\n      const headerMode: StackHeaderMode =\n        descriptor.options.headerMode ??\n        (!(\n          optionsForTransitionConfig.presentation === 'modal' ||\n          optionsForTransitionConfig.presentation === 'transparentModal' ||\n          nextDescriptor?.options.presentation === 'modal' ||\n          nextDescriptor?.options.presentation === 'transparentModal' ||\n          getIsModalPresentation(cardStyleInterpolator)\n        ) &&\n        Platform.OS === 'ios' &&\n        descriptor.options.header === undefined\n          ? 'float'\n          : 'screen');\n\n      const scene = {\n        route,\n        descriptor: {\n          ...descriptor,\n          options: {\n            ...descriptor.options,\n            animationEnabled,\n            cardOverlayEnabled,\n            cardStyleInterpolator,\n            gestureDirection,\n            gestureEnabled,\n            headerStyleInterpolator,\n            transitionSpec,\n            headerMode,\n          },\n        },\n        progress: {\n          current: getProgressFromGesture(\n            currentGesture,\n            state.layout,\n            descriptor\n          ),\n          next:\n            nextGesture &&\n            nextDescriptor?.options.presentation !== 'transparentModal'\n              ? getProgressFromGesture(\n                  nextGesture,\n                  state.layout,\n                  nextDescriptor\n                )\n              : undefined,\n          previous: previousGesture\n            ? getProgressFromGesture(\n                previousGesture,\n                state.layout,\n                previousDescriptor\n              )\n            : undefined,\n        },\n        __memo: [\n          state.layout,\n          descriptor,\n          nextDescriptor,\n          previousDescriptor,\n          currentGesture,\n          nextGesture,\n          previousGesture,\n        ],\n      };\n\n      if (\n        oldScene &&\n        scene.__memo.every((it, i) => {\n          // @ts-expect-error: we haven't added __memo to the annotation to prevent usage elsewhere\n          return oldScene.__memo[i] === it;\n        })\n      ) {\n        return oldScene;\n      }\n\n      return scene;\n    });\n\n    return {\n      routes: props.routes,\n      scenes,\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(\n        scenes,\n        props.insets,\n        props.isParentHeaderShown,\n        props.isParentModal,\n        state.layout,\n        state.headerHeights\n      ),\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: SafeAreaProviderCompat.initialMetrics.frame,\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {},\n    };\n  }\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        headerHeights: getHeaderHeights(\n          state.scenes,\n          props.insets,\n          props.isParentHeaderShown,\n          props.isParentModal,\n          layout,\n          state.headerHeights\n        ),\n      };\n    });\n  };\n\n  private handleHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ headerHeights }) => {\n      const previousHeight = headerHeights[route.key];\n\n      if (previousHeight === height) {\n        return null;\n      }\n\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  private getFocusedRoute = () => {\n    const { state } = this.props;\n\n    return state.routes[state.index];\n  };\n\n  private getPreviousScene = ({ route }: { route: Route<string> }) => {\n    const { getPreviousRoute } = this.props;\n    const { scenes } = this.state;\n\n    const previousRoute = getPreviousRoute({ route });\n\n    if (previousRoute) {\n      const previousScene = scenes.find(\n        (scene) => scene.descriptor.route.key === previousRoute.key\n      );\n\n      return previousScene;\n    }\n\n    return undefined;\n  };\n\n  render() {\n    const {\n      insets,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      renderHeader,\n      renderScene,\n      isParentHeaderShown,\n      isParentModal,\n      onTransitionStart,\n      onTransitionEnd,\n      onGestureStart,\n      onGestureEnd,\n      onGestureCancel,\n      detachInactiveScreens = Platform.OS === 'web' ||\n        Platform.OS === 'android' ||\n        Platform.OS === 'ios',\n    } = this.props;\n\n    const { scenes, layout, gestures, headerHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedHeaderHeight = headerHeights[focusedRoute.key];\n\n    const isFloatHeaderAbsolute = this.state.scenes.slice(-2).some((scene) => {\n      const options = scene.descriptor.options ?? {};\n      const { headerMode, headerTransparent, headerShown = true } = options;\n\n      if (\n        headerTransparent ||\n        headerShown === false ||\n        headerMode === 'screen'\n      ) {\n        return true;\n      }\n\n      return false;\n    });\n\n    let activeScreensLimit = 1;\n\n    for (let i = scenes.length - 1; i >= 0; i--) {\n      const { options } = scenes[i].descriptor;\n      const {\n        // By default, we don't want to detach the previous screen of the active one for modals\n        detachPreviousScreen = options.presentation === 'transparentModal'\n          ? false\n          : getIsModalPresentation(options.cardStyleInterpolator)\n          ? i !==\n            findLastIndex(scenes, (scene) => {\n              const { cardStyleInterpolator } = scene.descriptor.options;\n\n              return (\n                cardStyleInterpolator === forModalPresentationIOS ||\n                cardStyleInterpolator?.name === 'forModalPresentationIOS'\n              );\n            })\n          : true,\n      } = options;\n\n      if (detachPreviousScreen === false) {\n        activeScreensLimit++;\n      } else {\n        // Check at least last 2 screens before stopping\n        // This will make sure that screen isn't detached when another screen is animating on top of the transparent one\n        // For example, (Opaque -> Transparent -> Opaque)\n        if (i <= scenes.length - 2) {\n          break;\n        }\n      }\n    }\n\n    const floatingHeader = (\n      <React.Fragment key=\"header\">\n        {renderHeader({\n          mode: 'float',\n          layout,\n          scenes,\n          getPreviousScene: this.getPreviousScene,\n          getFocusedRoute: this.getFocusedRoute,\n          onContentHeightChange: this.handleHeaderLayout,\n          style: [\n            styles.floating,\n            isFloatHeaderAbsolute && [\n              // Without this, the header buttons won't be touchable on Android when headerTransparent: true\n              { height: focusedHeaderHeight },\n              styles.absolute,\n            ],\n          ],\n        })}\n      </React.Fragment>\n    );\n\n    return (\n      <Background>\n        {isFloatHeaderAbsolute ? null : floatingHeader}\n        <MaybeScreenContainer\n          enabled={detachInactiveScreens}\n          style={styles.container}\n          onLayout={this.handleLayout}\n        >\n          {routes.map((route, index, self) => {\n            const focused = focusedRoute.key === route.key;\n            const gesture = gestures[route.key];\n            const scene = scenes[index];\n\n            // For the screens that shouldn't be active, the value is 0\n            // For those that should be active, but are not the top screen, the value is 1\n            // For those on top of the stack and with interaction enabled, the value is 2\n            // For the old implementation, it stays the same it was\n            let isScreenActive:\n              | Animated.AnimatedInterpolation<0 | 1 | 2>\n              | 2\n              | 1\n              | 0 = 1;\n\n            if (index < self.length - activeScreensLimit - 1) {\n              // screen should be inactive because it is too deep in the stack\n              isScreenActive = STATE_INACTIVE;\n            } else {\n              const sceneForActivity = scenes[self.length - 1];\n              const outputValue =\n                index === self.length - 1\n                  ? STATE_ON_TOP // the screen is on top after the transition\n                  : index >= self.length - activeScreensLimit\n                  ? STATE_TRANSITIONING_OR_BELOW_TOP // the screen should stay active after the transition, it is not on top but is in activeLimit\n                  : STATE_INACTIVE; // the screen should be active only during the transition, it is at the edge of activeLimit\n              isScreenActive = sceneForActivity\n                ? sceneForActivity.progress.current.interpolate({\n                    inputRange: [0, 1 - EPSILON, 1],\n                    outputRange: [1, 1, outputValue],\n                    extrapolate: 'clamp',\n                  })\n                : STATE_TRANSITIONING_OR_BELOW_TOP;\n            }\n\n            const {\n              headerShown = true,\n              headerTransparent,\n              headerStyle,\n              headerTintColor,\n              freezeOnBlur,\n            } = scene.descriptor.options;\n\n            const safeAreaInsetTop = insets.top;\n            const safeAreaInsetRight = insets.right;\n            const safeAreaInsetBottom = insets.bottom;\n            const safeAreaInsetLeft = insets.left;\n\n            const headerHeight =\n              headerShown !== false ? headerHeights[route.key] : 0;\n\n            let headerDarkContent: boolean | undefined;\n\n            if (headerShown) {\n              if (typeof headerTintColor === 'string') {\n                headerDarkContent = Color(headerTintColor).isDark();\n              } else {\n                const flattenedHeaderStyle = StyleSheet.flatten(headerStyle);\n\n                if (\n                  flattenedHeaderStyle &&\n                  'backgroundColor' in flattenedHeaderStyle &&\n                  typeof flattenedHeaderStyle.backgroundColor === 'string'\n                ) {\n                  headerDarkContent = !Color(\n                    flattenedHeaderStyle.backgroundColor\n                  ).isDark();\n                }\n              }\n            }\n\n            // Start from current card and count backwards the number of cards with same interpolation\n            const interpolationIndex = getInterpolationIndex(scenes, index);\n            const isModal = getIsModal(\n              scene,\n              interpolationIndex,\n              isParentModal\n            );\n\n            const isNextScreenTransparent =\n              scenes[index + 1]?.descriptor.options.presentation ===\n              'transparentModal';\n\n            const detachCurrentScreen =\n              scenes[index + 1]?.descriptor.options.detachPreviousScreen !==\n              false;\n\n            return (\n              <MaybeScreen\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                enabled={detachInactiveScreens}\n                active={isScreenActive}\n                freezeOnBlur={freezeOnBlur}\n                pointerEvents=\"box-none\"\n              >\n                <CardContainer\n                  index={index}\n                  interpolationIndex={interpolationIndex}\n                  modal={isModal}\n                  active={index === self.length - 1}\n                  focused={focused}\n                  closing={closingRouteKeys.includes(route.key)}\n                  layout={layout}\n                  gesture={gesture}\n                  scene={scene}\n                  safeAreaInsetTop={safeAreaInsetTop}\n                  safeAreaInsetRight={safeAreaInsetRight}\n                  safeAreaInsetBottom={safeAreaInsetBottom}\n                  safeAreaInsetLeft={safeAreaInsetLeft}\n                  onGestureStart={onGestureStart}\n                  onGestureCancel={onGestureCancel}\n                  onGestureEnd={onGestureEnd}\n                  headerHeight={headerHeight}\n                  isParentHeaderShown={isParentHeaderShown}\n                  onHeaderHeightChange={this.handleHeaderLayout}\n                  getPreviousScene={this.getPreviousScene}\n                  getFocusedRoute={this.getFocusedRoute}\n                  headerDarkContent={headerDarkContent}\n                  hasAbsoluteFloatHeader={\n                    isFloatHeaderAbsolute && !headerTransparent\n                  }\n                  renderHeader={renderHeader}\n                  renderScene={renderScene}\n                  onOpenRoute={onOpenRoute}\n                  onCloseRoute={onCloseRoute}\n                  onTransitionStart={onTransitionStart}\n                  onTransitionEnd={onTransitionEnd}\n                  isNextScreenTransparent={isNextScreenTransparent}\n                  detachCurrentScreen={detachCurrentScreen}\n                />\n              </MaybeScreen>\n            );\n          })}\n        </MaybeScreenContainer>\n        {isFloatHeaderAbsolute ? floatingHeader : null}\n      </Background>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n  floating: {\n    zIndex: 1,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}