{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\nvar _AnimatedNode = _interopRequireDefault(require(\"./AnimatedNode\"));\nvar _AnimatedWithChildren2 = _interopRequireDefault(require(\"./AnimatedWithChildren\"));\nvar _NativeAnimatedHelper = _interopRequireDefault(require(\"../NativeAnimatedHelper\"));\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\nvar _normalizeCssColor = _interopRequireDefault(require(\"normalize-css-color\"));\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nvar __DEV__ = process.env.NODE_ENV !== 'production';\nvar linear = function linear(t) {\n  return t;\n};\nfunction createInterpolation(config) {\n  if (config.outputRange && typeof config.outputRange[0] === 'string') {\n    return createInterpolationFromStringOutputRange(config);\n  }\n  var outputRange = config.outputRange;\n  checkInfiniteRange('outputRange', outputRange);\n  var inputRange = config.inputRange;\n  checkInfiniteRange('inputRange', inputRange);\n  checkValidInputRange(inputRange);\n  (0, _invariant.default)(inputRange.length === outputRange.length, 'inputRange (' + inputRange.length + ') and outputRange (' + outputRange.length + ') must have the same length');\n  var easing = config.easing || linear;\n  var extrapolateLeft = 'extend';\n  if (config.extrapolateLeft !== undefined) {\n    extrapolateLeft = config.extrapolateLeft;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateLeft = config.extrapolate;\n  }\n  var extrapolateRight = 'extend';\n  if (config.extrapolateRight !== undefined) {\n    extrapolateRight = config.extrapolateRight;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateRight = config.extrapolate;\n  }\n  return function (input) {\n    (0, _invariant.default)(typeof input === 'number', 'Cannot interpolation an input which is not a number');\n    var range = findRange(input, inputRange);\n    return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight);\n  };\n}\nfunction interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight) {\n  var result = input;\n  if (result < inputMin) {\n    if (extrapolateLeft === 'identity') {\n      return result;\n    } else if (extrapolateLeft === 'clamp') {\n      result = inputMin;\n    } else if (extrapolateLeft === 'extend') {}\n  }\n  if (result > inputMax) {\n    if (extrapolateRight === 'identity') {\n      return result;\n    } else if (extrapolateRight === 'clamp') {\n      result = inputMax;\n    } else if (extrapolateRight === 'extend') {}\n  }\n  if (outputMin === outputMax) {\n    return outputMin;\n  }\n  if (inputMin === inputMax) {\n    if (input <= inputMin) {\n      return outputMin;\n    }\n    return outputMax;\n  }\n  if (inputMin === -Infinity) {\n    result = -result;\n  } else if (inputMax === Infinity) {\n    result = result - inputMin;\n  } else {\n    result = (result - inputMin) / (inputMax - inputMin);\n  }\n  result = easing(result);\n  if (outputMin === -Infinity) {\n    result = -result;\n  } else if (outputMax === Infinity) {\n    result = result + outputMin;\n  } else {\n    result = result * (outputMax - outputMin) + outputMin;\n  }\n  return result;\n}\nfunction colorToRgba(input) {\n  var normalizedColor = (0, _normalizeCssColor.default)(input);\n  if (normalizedColor === null || typeof normalizedColor !== 'number') {\n    return input;\n  }\n  normalizedColor = normalizedColor || 0;\n  var r = (normalizedColor & 0xff000000) >>> 24;\n  var g = (normalizedColor & 0x00ff0000) >>> 16;\n  var b = (normalizedColor & 0x0000ff00) >>> 8;\n  var a = (normalizedColor & 0x000000ff) / 255;\n  return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + a + \")\";\n}\nvar stringShapeRegex = /[+-]?(?:\\d+\\.?\\d*|\\.\\d+)(?:[eE][+-]?\\d+)?/g;\nfunction createInterpolationFromStringOutputRange(config) {\n  var outputRange = config.outputRange;\n  (0, _invariant.default)(outputRange.length >= 2, 'Bad output range');\n  outputRange = outputRange.map(colorToRgba);\n  checkPattern(outputRange);\n  var outputRanges = outputRange[0].match(stringShapeRegex).map(function () {\n    return [];\n  });\n  outputRange.forEach(function (value) {\n    value.match(stringShapeRegex).forEach(function (number, i) {\n      outputRanges[i].push(+number);\n    });\n  });\n  var interpolations = outputRange[0].match(stringShapeRegex).map(function (value, i) {\n    return createInterpolation((0, _objectSpread2.default)((0, _objectSpread2.default)({}, config), {}, {\n      outputRange: outputRanges[i]\n    }));\n  });\n  var shouldRound = isRgbOrRgba(outputRange[0]);\n  return function (input) {\n    var i = 0;\n    return outputRange[0].replace(stringShapeRegex, function () {\n      var val = +interpolations[i++](input);\n      if (shouldRound) {\n        val = i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;\n      }\n      return String(val);\n    });\n  };\n}\nfunction isRgbOrRgba(range) {\n  return typeof range === 'string' && range.startsWith('rgb');\n}\nfunction checkPattern(arr) {\n  var pattern = arr[0].replace(stringShapeRegex, '');\n  for (var i = 1; i < arr.length; ++i) {\n    (0, _invariant.default)(pattern === arr[i].replace(stringShapeRegex, ''), 'invalid pattern ' + arr[0] + ' and ' + arr[i]);\n  }\n}\nfunction findRange(input, inputRange) {\n  var i;\n  for (i = 1; i < inputRange.length - 1; ++i) {\n    if (inputRange[i] >= input) {\n      break;\n    }\n  }\n  return i - 1;\n}\nfunction checkValidInputRange(arr) {\n  (0, _invariant.default)(arr.length >= 2, 'inputRange must have at least 2 elements');\n  for (var i = 1; i < arr.length; ++i) {\n    (0, _invariant.default)(arr[i] >= arr[i - 1], 'inputRange must be monotonically non-decreasing ' + arr);\n  }\n}\nfunction checkInfiniteRange(name, arr) {\n  (0, _invariant.default)(arr.length >= 2, name + ' must have at least 2 elements');\n  (0, _invariant.default)(arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity, name + 'cannot be ]-infinity;+infinity[ ' + arr);\n}\nvar AnimatedInterpolation = function (_AnimatedWithChildren) {\n  (0, _inherits2.default)(AnimatedInterpolation, _AnimatedWithChildren);\n  var _super = _createSuper(AnimatedInterpolation);\n  function AnimatedInterpolation(parent, config) {\n    var _this;\n    (0, _classCallCheck2.default)(this, AnimatedInterpolation);\n    _this = _super.call(this);\n    _this._parent = parent;\n    _this._config = config;\n    _this._interpolation = createInterpolation(config);\n    return _this;\n  }\n  (0, _createClass2.default)(AnimatedInterpolation, [{\n    key: \"__makeNative\",\n    value: function __makeNative() {\n      this._parent.__makeNative();\n      (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedInterpolation.prototype), \"__makeNative\", this).call(this);\n    }\n  }, {\n    key: \"__getValue\",\n    value: function __getValue() {\n      var parentValue = this._parent.__getValue();\n      (0, _invariant.default)(typeof parentValue === 'number', 'Cannot interpolate an input which is not a number.');\n      return this._interpolation(parentValue);\n    }\n  }, {\n    key: \"interpolate\",\n    value: function interpolate(config) {\n      return new AnimatedInterpolation(this, config);\n    }\n  }, {\n    key: \"__attach\",\n    value: function __attach() {\n      this._parent.__addChild(this);\n    }\n  }, {\n    key: \"__detach\",\n    value: function __detach() {\n      this._parent.__removeChild(this);\n      (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedInterpolation.prototype), \"__detach\", this).call(this);\n    }\n  }, {\n    key: \"__transformDataType\",\n    value: function __transformDataType(range) {\n      return range.map(_NativeAnimatedHelper.default.transformDataType);\n    }\n  }, {\n    key: \"__getNativeConfig\",\n    value: function __getNativeConfig() {\n      if (__DEV__) {\n        _NativeAnimatedHelper.default.validateInterpolation(this._config);\n      }\n      return {\n        inputRange: this._config.inputRange,\n        outputRange: this.__transformDataType(this._config.outputRange),\n        extrapolateLeft: this._config.extrapolateLeft || this._config.extrapolate || 'extend',\n        extrapolateRight: this._config.extrapolateRight || this._config.extrapolate || 'extend',\n        type: 'interpolation'\n      };\n    }\n  }]);\n  return AnimatedInterpolation;\n}(_AnimatedWithChildren2.default);\nAnimatedInterpolation.__createInterpolation = createInterpolation;\nvar _default = exports.default = AnimatedInterpolation;","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_classCallCheck2","_createClass2","_get2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_objectSpread2","_AnimatedNode","_AnimatedWithChildren2","_NativeAnimatedHelper","_invariant","_normalizeCssColor","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","constructor","Reflect","construct","arguments","apply","sham","Proxy","Boolean","prototype","valueOf","call","e","__DEV__","process","env","NODE_ENV","linear","t","createInterpolation","config","outputRange","createInterpolationFromStringOutputRange","checkInfiniteRange","inputRange","checkValidInputRange","invariant","length","easing","extrapolateLeft","undefined","extrapolate","extrapolateRight","input","range","findRange","interpolate","inputMin","inputMax","outputMin","outputMax","Infinity","colorToRgba","normalizedColor","normalizeColor","r","g","b","a","stringShapeRegex","map","checkPattern","outputRanges","match","forEach","number","i","push","interpolations","_objectSpread","shouldRound","isRgbOrRgba","replace","val","Math","round","String","startsWith","arr","pattern","name","AnimatedInterpolation","_AnimatedWithChildren","_super","parent","_this","_parent","_config","_interpolation","key","__makeNative","__getValue","parentValue","__attach","__addChild","__detach","__removeChild","__transformDataType","NativeAnimatedHelper","transformDataType","__getNativeConfig","validateInterpolation","type","AnimatedWithChildren","__createInterpolation","_default"],"sources":["C:/Users/erick_ribeiro-souza/Desktop/s.a 2/sa.ReactNative2semestre-1/node_modules/react-native-web/dist/vendor/react-native/Animated/nodes/AnimatedInterpolation.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n\n/* eslint no-bitwise: 0 */\n'use strict';\n\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport AnimatedNode from './AnimatedNode';\nimport AnimatedWithChildren from './AnimatedWithChildren';\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\nimport invariant from 'fbjs/lib/invariant';\nimport normalizeColor from 'normalize-css-color';\n\nvar __DEV__ = process.env.NODE_ENV !== 'production';\n\nvar linear = t => t;\n/**\n * Very handy helper to map input ranges to output ranges with an easing\n * function and custom behavior outside of the ranges.\n */\n\n\nfunction createInterpolation(config) {\n  if (config.outputRange && typeof config.outputRange[0] === 'string') {\n    return createInterpolationFromStringOutputRange(config);\n  }\n\n  var outputRange = config.outputRange;\n  checkInfiniteRange('outputRange', outputRange);\n  var inputRange = config.inputRange;\n  checkInfiniteRange('inputRange', inputRange);\n  checkValidInputRange(inputRange);\n  invariant(inputRange.length === outputRange.length, 'inputRange (' + inputRange.length + ') and outputRange (' + outputRange.length + ') must have the same length');\n  var easing = config.easing || linear;\n  var extrapolateLeft = 'extend';\n\n  if (config.extrapolateLeft !== undefined) {\n    extrapolateLeft = config.extrapolateLeft;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateLeft = config.extrapolate;\n  }\n\n  var extrapolateRight = 'extend';\n\n  if (config.extrapolateRight !== undefined) {\n    extrapolateRight = config.extrapolateRight;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateRight = config.extrapolate;\n  }\n\n  return input => {\n    invariant(typeof input === 'number', 'Cannot interpolation an input which is not a number');\n    var range = findRange(input, inputRange);\n    return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight);\n  };\n}\n\nfunction interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight) {\n  var result = input; // Extrapolate\n\n  if (result < inputMin) {\n    if (extrapolateLeft === 'identity') {\n      return result;\n    } else if (extrapolateLeft === 'clamp') {\n      result = inputMin;\n    } else if (extrapolateLeft === 'extend') {// noop\n    }\n  }\n\n  if (result > inputMax) {\n    if (extrapolateRight === 'identity') {\n      return result;\n    } else if (extrapolateRight === 'clamp') {\n      result = inputMax;\n    } else if (extrapolateRight === 'extend') {// noop\n    }\n  }\n\n  if (outputMin === outputMax) {\n    return outputMin;\n  }\n\n  if (inputMin === inputMax) {\n    if (input <= inputMin) {\n      return outputMin;\n    }\n\n    return outputMax;\n  } // Input Range\n\n\n  if (inputMin === -Infinity) {\n    result = -result;\n  } else if (inputMax === Infinity) {\n    result = result - inputMin;\n  } else {\n    result = (result - inputMin) / (inputMax - inputMin);\n  } // Easing\n\n\n  result = easing(result); // Output Range\n\n  if (outputMin === -Infinity) {\n    result = -result;\n  } else if (outputMax === Infinity) {\n    result = result + outputMin;\n  } else {\n    result = result * (outputMax - outputMin) + outputMin;\n  }\n\n  return result;\n}\n\nfunction colorToRgba(input) {\n  var normalizedColor = normalizeColor(input);\n\n  if (normalizedColor === null || typeof normalizedColor !== 'number') {\n    return input;\n  }\n\n  normalizedColor = normalizedColor || 0;\n  var r = (normalizedColor & 0xff000000) >>> 24;\n  var g = (normalizedColor & 0x00ff0000) >>> 16;\n  var b = (normalizedColor & 0x0000ff00) >>> 8;\n  var a = (normalizedColor & 0x000000ff) / 255;\n  return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + a + \")\";\n}\n\nvar stringShapeRegex = /[+-]?(?:\\d+\\.?\\d*|\\.\\d+)(?:[eE][+-]?\\d+)?/g;\n/**\n * Supports string shapes by extracting numbers so new values can be computed,\n * and recombines those values into new strings of the same shape.  Supports\n * things like:\n *\n *   rgba(123, 42, 99, 0.36) // colors\n *   -45deg                  // values with units\n */\n\nfunction createInterpolationFromStringOutputRange(config) {\n  var outputRange = config.outputRange;\n  invariant(outputRange.length >= 2, 'Bad output range');\n  outputRange = outputRange.map(colorToRgba);\n  checkPattern(outputRange); // ['rgba(0, 100, 200, 0)', 'rgba(50, 150, 250, 0.5)']\n  // ->\n  // [\n  //   [0, 50],\n  //   [100, 150],\n  //   [200, 250],\n  //   [0, 0.5],\n  // ]\n\n  /* $FlowFixMe(>=0.18.0): `outputRange[0].match()` can return `null`. Need to\n   * guard against this possibility.\n   */\n\n  var outputRanges = outputRange[0].match(stringShapeRegex).map(() => []);\n  outputRange.forEach(value => {\n    /* $FlowFixMe(>=0.18.0): `value.match()` can return `null`. Need to guard\n     * against this possibility.\n     */\n    value.match(stringShapeRegex).forEach((number, i) => {\n      outputRanges[i].push(+number);\n    });\n  });\n  var interpolations = outputRange[0].match(stringShapeRegex)\n  /* $FlowFixMe(>=0.18.0): `outputRange[0].match()` can return `null`. Need\n   * to guard against this possibility. */\n  .map((value, i) => {\n    return createInterpolation(_objectSpread(_objectSpread({}, config), {}, {\n      outputRange: outputRanges[i]\n    }));\n  }); // rgba requires that the r,g,b are integers.... so we want to round them, but we *dont* want to\n  // round the opacity (4th column).\n\n  var shouldRound = isRgbOrRgba(outputRange[0]);\n  return input => {\n    var i = 0; // 'rgba(0, 100, 200, 0)'\n    // ->\n    // 'rgba(${interpolations[0](input)}, ${interpolations[1](input)}, ...'\n\n    return outputRange[0].replace(stringShapeRegex, () => {\n      var val = +interpolations[i++](input);\n\n      if (shouldRound) {\n        val = i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;\n      }\n\n      return String(val);\n    });\n  };\n}\n\nfunction isRgbOrRgba(range) {\n  return typeof range === 'string' && range.startsWith('rgb');\n}\n\nfunction checkPattern(arr) {\n  var pattern = arr[0].replace(stringShapeRegex, '');\n\n  for (var i = 1; i < arr.length; ++i) {\n    invariant(pattern === arr[i].replace(stringShapeRegex, ''), 'invalid pattern ' + arr[0] + ' and ' + arr[i]);\n  }\n}\n\nfunction findRange(input, inputRange) {\n  var i;\n\n  for (i = 1; i < inputRange.length - 1; ++i) {\n    if (inputRange[i] >= input) {\n      break;\n    }\n  }\n\n  return i - 1;\n}\n\nfunction checkValidInputRange(arr) {\n  invariant(arr.length >= 2, 'inputRange must have at least 2 elements');\n\n  for (var i = 1; i < arr.length; ++i) {\n    invariant(arr[i] >= arr[i - 1],\n    /* $FlowFixMe(>=0.13.0) - In the addition expression below this comment,\n     * one or both of the operands may be something that doesn't cleanly\n     * convert to a string, like undefined, null, and object, etc. If you really\n     * mean this implicit string conversion, you can do something like\n     * String(myThing)\n     */\n    'inputRange must be monotonically non-decreasing ' + arr);\n  }\n}\n\nfunction checkInfiniteRange(name, arr) {\n  invariant(arr.length >= 2, name + ' must have at least 2 elements');\n  invariant(arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity,\n  /* $FlowFixMe(>=0.13.0) - In the addition expression below this comment,\n   * one or both of the operands may be something that doesn't cleanly convert\n   * to a string, like undefined, null, and object, etc. If you really mean\n   * this implicit string conversion, you can do something like\n   * String(myThing)\n   */\n  name + 'cannot be ]-infinity;+infinity[ ' + arr);\n}\n\nclass AnimatedInterpolation extends AnimatedWithChildren {\n  // Export for testing.\n  constructor(parent, config) {\n    super();\n    this._parent = parent;\n    this._config = config;\n    this._interpolation = createInterpolation(config);\n  }\n\n  __makeNative() {\n    this._parent.__makeNative();\n\n    super.__makeNative();\n  }\n\n  __getValue() {\n    var parentValue = this._parent.__getValue();\n\n    invariant(typeof parentValue === 'number', 'Cannot interpolate an input which is not a number.');\n    return this._interpolation(parentValue);\n  }\n\n  interpolate(config) {\n    return new AnimatedInterpolation(this, config);\n  }\n\n  __attach() {\n    this._parent.__addChild(this);\n  }\n\n  __detach() {\n    this._parent.__removeChild(this);\n\n    super.__detach();\n  }\n\n  __transformDataType(range) {\n    return range.map(NativeAnimatedHelper.transformDataType);\n  }\n\n  __getNativeConfig() {\n    if (__DEV__) {\n      NativeAnimatedHelper.validateInterpolation(this._config);\n    }\n\n    return {\n      inputRange: this._config.inputRange,\n      // Only the `outputRange` can contain strings so we don't need to transform `inputRange` here\n\n      /* $FlowFixMe(>=0.38.0) - Flow error detected during the deployment of\n       * v0.38.0. To see the error, remove this comment and run flow */\n      outputRange: this.__transformDataType(this._config.outputRange),\n      extrapolateLeft: this._config.extrapolateLeft || this._config.extrapolate || 'extend',\n      extrapolateRight: this._config.extrapolateRight || this._config.extrapolate || 'extend',\n      type: 'interpolation'\n    };\n  }\n\n}\n\nAnimatedInterpolation.__createInterpolation = createInterpolation;\nexport default AnimatedInterpolation;"],"mappings":"AAWA,YAAY;;AAAC,IAAAA,sBAAA,GAAAC,OAAA;AAAAC,MAAA,CAAAC,cAAA,CAAAC,OAAA;EAAAC,KAAA;AAAA;AAAAD,OAAA,CAAAE,OAAA;AAAA,IAAAC,gBAAA,GAAAP,sBAAA,CAAAC,OAAA;AAAA,IAAAO,aAAA,GAAAR,sBAAA,CAAAC,OAAA;AAAA,IAAAQ,KAAA,GAAAT,sBAAA,CAAAC,OAAA;AAAA,IAAAS,UAAA,GAAAV,sBAAA,CAAAC,OAAA;AAAA,IAAAU,2BAAA,GAAAX,sBAAA,CAAAC,OAAA;AAAA,IAAAW,gBAAA,GAAAZ,sBAAA,CAAAC,OAAA;AAEb,IAAAY,cAAA,GAAAb,sBAAA,CAAAC,OAAA;AACA,IAAAa,aAAA,GAAAd,sBAAA,CAAAC,OAAA;AACA,IAAAc,sBAAA,GAAAf,sBAAA,CAAAC,OAAA;AACA,IAAAe,qBAAA,GAAAhB,sBAAA,CAAAC,OAAA;AACA,IAAAgB,UAAA,GAAAjB,sBAAA,CAAAC,OAAA;AACA,IAAAiB,kBAAA,GAAAlB,sBAAA,CAAAC,OAAA;AAAiD,SAAAkB,aAAAC,OAAA,QAAAC,yBAAA,GAAAC,yBAAA,oBAAAC,qBAAA,QAAAC,KAAA,OAAAZ,gBAAA,CAAAN,OAAA,EAAAc,OAAA,GAAAK,MAAA,MAAAJ,yBAAA,QAAAK,SAAA,OAAAd,gBAAA,CAAAN,OAAA,QAAAqB,WAAA,EAAAF,MAAA,GAAAG,OAAA,CAAAC,SAAA,CAAAL,KAAA,EAAAM,SAAA,EAAAJ,SAAA,YAAAD,MAAA,GAAAD,KAAA,CAAAO,KAAA,OAAAD,SAAA,gBAAAnB,2BAAA,CAAAL,OAAA,QAAAmB,MAAA;AAAA,SAAAH,0BAAA,eAAAM,OAAA,qBAAAA,OAAA,CAAAC,SAAA,oBAAAD,OAAA,CAAAC,SAAA,CAAAG,IAAA,2BAAAC,KAAA,oCAAAC,OAAA,CAAAC,SAAA,CAAAC,OAAA,CAAAC,IAAA,CAAAT,OAAA,CAAAC,SAAA,CAAAK,OAAA,8CAAAI,CAAA;AAEjD,IAAIC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY;AAEnD,IAAIC,MAAM,GAAG,SAATA,MAAMA,CAAGC,CAAC;EAAA,OAAIA,CAAC;AAAA;AAOnB,SAASC,mBAAmBA,CAACC,MAAM,EAAE;EACnC,IAAIA,MAAM,CAACC,WAAW,IAAI,OAAOD,MAAM,CAACC,WAAW,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;IACnE,OAAOC,wCAAwC,CAACF,MAAM,CAAC;EACzD;EAEA,IAAIC,WAAW,GAAGD,MAAM,CAACC,WAAW;EACpCE,kBAAkB,CAAC,aAAa,EAAEF,WAAW,CAAC;EAC9C,IAAIG,UAAU,GAAGJ,MAAM,CAACI,UAAU;EAClCD,kBAAkB,CAAC,YAAY,EAAEC,UAAU,CAAC;EAC5CC,oBAAoB,CAACD,UAAU,CAAC;EAChC,IAAAE,kBAAS,EAACF,UAAU,CAACG,MAAM,KAAKN,WAAW,CAACM,MAAM,EAAE,cAAc,GAAGH,UAAU,CAACG,MAAM,GAAG,qBAAqB,GAAGN,WAAW,CAACM,MAAM,GAAG,6BAA6B,CAAC;EACpK,IAAIC,MAAM,GAAGR,MAAM,CAACQ,MAAM,IAAIX,MAAM;EACpC,IAAIY,eAAe,GAAG,QAAQ;EAE9B,IAAIT,MAAM,CAACS,eAAe,KAAKC,SAAS,EAAE;IACxCD,eAAe,GAAGT,MAAM,CAACS,eAAe;EAC1C,CAAC,MAAM,IAAIT,MAAM,CAACW,WAAW,KAAKD,SAAS,EAAE;IAC3CD,eAAe,GAAGT,MAAM,CAACW,WAAW;EACtC;EAEA,IAAIC,gBAAgB,GAAG,QAAQ;EAE/B,IAAIZ,MAAM,CAACY,gBAAgB,KAAKF,SAAS,EAAE;IACzCE,gBAAgB,GAAGZ,MAAM,CAACY,gBAAgB;EAC5C,CAAC,MAAM,IAAIZ,MAAM,CAACW,WAAW,KAAKD,SAAS,EAAE;IAC3CE,gBAAgB,GAAGZ,MAAM,CAACW,WAAW;EACvC;EAEA,OAAO,UAAAE,KAAK,EAAI;IACd,IAAAP,kBAAS,EAAC,OAAOO,KAAK,KAAK,QAAQ,EAAE,qDAAqD,CAAC;IAC3F,IAAIC,KAAK,GAAGC,SAAS,CAACF,KAAK,EAAET,UAAU,CAAC;IACxC,OAAOY,WAAW,CAACH,KAAK,EAAET,UAAU,CAACU,KAAK,CAAC,EAAEV,UAAU,CAACU,KAAK,GAAG,CAAC,CAAC,EAAEb,WAAW,CAACa,KAAK,CAAC,EAAEb,WAAW,CAACa,KAAK,GAAG,CAAC,CAAC,EAAEN,MAAM,EAAEC,eAAe,EAAEG,gBAAgB,CAAC;EAC5J,CAAC;AACH;AAEA,SAASI,WAAWA,CAACH,KAAK,EAAEI,QAAQ,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,SAAS,EAAEZ,MAAM,EAAEC,eAAe,EAAEG,gBAAgB,EAAE;EAC/G,IAAIjC,MAAM,GAAGkC,KAAK;EAElB,IAAIlC,MAAM,GAAGsC,QAAQ,EAAE;IACrB,IAAIR,eAAe,KAAK,UAAU,EAAE;MAClC,OAAO9B,MAAM;IACf,CAAC,MAAM,IAAI8B,eAAe,KAAK,OAAO,EAAE;MACtC9B,MAAM,GAAGsC,QAAQ;IACnB,CAAC,MAAM,IAAIR,eAAe,KAAK,QAAQ,EAAE,CACzC;EACF;EAEA,IAAI9B,MAAM,GAAGuC,QAAQ,EAAE;IACrB,IAAIN,gBAAgB,KAAK,UAAU,EAAE;MACnC,OAAOjC,MAAM;IACf,CAAC,MAAM,IAAIiC,gBAAgB,KAAK,OAAO,EAAE;MACvCjC,MAAM,GAAGuC,QAAQ;IACnB,CAAC,MAAM,IAAIN,gBAAgB,KAAK,QAAQ,EAAE,CAC1C;EACF;EAEA,IAAIO,SAAS,KAAKC,SAAS,EAAE;IAC3B,OAAOD,SAAS;EAClB;EAEA,IAAIF,QAAQ,KAAKC,QAAQ,EAAE;IACzB,IAAIL,KAAK,IAAII,QAAQ,EAAE;MACrB,OAAOE,SAAS;IAClB;IAEA,OAAOC,SAAS;EAClB;EAGA,IAAIH,QAAQ,KAAK,CAACI,QAAQ,EAAE;IAC1B1C,MAAM,GAAG,CAACA,MAAM;EAClB,CAAC,MAAM,IAAIuC,QAAQ,KAAKG,QAAQ,EAAE;IAChC1C,MAAM,GAAGA,MAAM,GAAGsC,QAAQ;EAC5B,CAAC,MAAM;IACLtC,MAAM,GAAG,CAACA,MAAM,GAAGsC,QAAQ,KAAKC,QAAQ,GAAGD,QAAQ,CAAC;EACtD;EAGAtC,MAAM,GAAG6B,MAAM,CAAC7B,MAAM,CAAC;EAEvB,IAAIwC,SAAS,KAAK,CAACE,QAAQ,EAAE;IAC3B1C,MAAM,GAAG,CAACA,MAAM;EAClB,CAAC,MAAM,IAAIyC,SAAS,KAAKC,QAAQ,EAAE;IACjC1C,MAAM,GAAGA,MAAM,GAAGwC,SAAS;EAC7B,CAAC,MAAM;IACLxC,MAAM,GAAGA,MAAM,IAAIyC,SAAS,GAAGD,SAAS,CAAC,GAAGA,SAAS;EACvD;EAEA,OAAOxC,MAAM;AACf;AAEA,SAAS2C,WAAWA,CAACT,KAAK,EAAE;EAC1B,IAAIU,eAAe,GAAG,IAAAC,0BAAc,EAACX,KAAK,CAAC;EAE3C,IAAIU,eAAe,KAAK,IAAI,IAAI,OAAOA,eAAe,KAAK,QAAQ,EAAE;IACnE,OAAOV,KAAK;EACd;EAEAU,eAAe,GAAGA,eAAe,IAAI,CAAC;EACtC,IAAIE,CAAC,GAAG,CAACF,eAAe,GAAG,UAAU,MAAM,EAAE;EAC7C,IAAIG,CAAC,GAAG,CAACH,eAAe,GAAG,UAAU,MAAM,EAAE;EAC7C,IAAII,CAAC,GAAG,CAACJ,eAAe,GAAG,UAAU,MAAM,CAAC;EAC5C,IAAIK,CAAC,GAAG,CAACL,eAAe,GAAG,UAAU,IAAI,GAAG;EAC5C,OAAO,OAAO,GAAGE,CAAC,GAAG,IAAI,GAAGC,CAAC,GAAG,IAAI,GAAGC,CAAC,GAAG,IAAI,GAAGC,CAAC,GAAG,GAAG;AAC3D;AAEA,IAAIC,gBAAgB,GAAG,4CAA4C;AAUnE,SAAS3B,wCAAwCA,CAACF,MAAM,EAAE;EACxD,IAAIC,WAAW,GAAGD,MAAM,CAACC,WAAW;EACpC,IAAAK,kBAAS,EAACL,WAAW,CAACM,MAAM,IAAI,CAAC,EAAE,kBAAkB,CAAC;EACtDN,WAAW,GAAGA,WAAW,CAAC6B,GAAG,CAACR,WAAW,CAAC;EAC1CS,YAAY,CAAC9B,WAAW,CAAC;EAazB,IAAI+B,YAAY,GAAG/B,WAAW,CAAC,CAAC,CAAC,CAACgC,KAAK,CAACJ,gBAAgB,CAAC,CAACC,GAAG,CAAC;IAAA,OAAM,EAAE;EAAA,EAAC;EACvE7B,WAAW,CAACiC,OAAO,CAAC,UAAA3E,KAAK,EAAI;IAI3BA,KAAK,CAAC0E,KAAK,CAACJ,gBAAgB,CAAC,CAACK,OAAO,CAAC,UAACC,MAAM,EAAEC,CAAC,EAAK;MACnDJ,YAAY,CAACI,CAAC,CAAC,CAACC,IAAI,CAAC,CAACF,MAAM,CAAC;IAC/B,CAAC,CAAC;EACJ,CAAC,CAAC;EACF,IAAIG,cAAc,GAAGrC,WAAW,CAAC,CAAC,CAAC,CAACgC,KAAK,CAACJ,gBAAgB,CAAC,CAG1DC,GAAG,CAAC,UAACvE,KAAK,EAAE6E,CAAC,EAAK;IACjB,OAAOrC,mBAAmB,CAAC,IAAAwC,sBAAa,EAAC,IAAAA,sBAAa,EAAC,CAAC,CAAC,EAAEvC,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE;MACtEC,WAAW,EAAE+B,YAAY,CAACI,CAAC;IAC7B,CAAC,CAAC,CAAC;EACL,CAAC,CAAC;EAGF,IAAII,WAAW,GAAGC,WAAW,CAACxC,WAAW,CAAC,CAAC,CAAC,CAAC;EAC7C,OAAO,UAAAY,KAAK,EAAI;IACd,IAAIuB,CAAC,GAAG,CAAC;IAIT,OAAOnC,WAAW,CAAC,CAAC,CAAC,CAACyC,OAAO,CAACb,gBAAgB,EAAE,YAAM;MACpD,IAAIc,GAAG,GAAG,CAACL,cAAc,CAACF,CAAC,EAAE,CAAC,CAACvB,KAAK,CAAC;MAErC,IAAI2B,WAAW,EAAE;QACfG,GAAG,GAAGP,CAAC,GAAG,CAAC,GAAGQ,IAAI,CAACC,KAAK,CAACF,GAAG,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACF,GAAG,GAAG,IAAI,CAAC,GAAG,IAAI;MAC/D;MAEA,OAAOG,MAAM,CAACH,GAAG,CAAC;IACpB,CAAC,CAAC;EACJ,CAAC;AACH;AAEA,SAASF,WAAWA,CAAC3B,KAAK,EAAE;EAC1B,OAAO,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAACiC,UAAU,CAAC,KAAK,CAAC;AAC7D;AAEA,SAAShB,YAAYA,CAACiB,GAAG,EAAE;EACzB,IAAIC,OAAO,GAAGD,GAAG,CAAC,CAAC,CAAC,CAACN,OAAO,CAACb,gBAAgB,EAAE,EAAE,CAAC;EAElD,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGY,GAAG,CAACzC,MAAM,EAAE,EAAE6B,CAAC,EAAE;IACnC,IAAA9B,kBAAS,EAAC2C,OAAO,KAAKD,GAAG,CAACZ,CAAC,CAAC,CAACM,OAAO,CAACb,gBAAgB,EAAE,EAAE,CAAC,EAAE,kBAAkB,GAAGmB,GAAG,CAAC,CAAC,CAAC,GAAG,OAAO,GAAGA,GAAG,CAACZ,CAAC,CAAC,CAAC;EAC7G;AACF;AAEA,SAASrB,SAASA,CAACF,KAAK,EAAET,UAAU,EAAE;EACpC,IAAIgC,CAAC;EAEL,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGhC,UAAU,CAACG,MAAM,GAAG,CAAC,EAAE,EAAE6B,CAAC,EAAE;IAC1C,IAAIhC,UAAU,CAACgC,CAAC,CAAC,IAAIvB,KAAK,EAAE;MAC1B;IACF;EACF;EAEA,OAAOuB,CAAC,GAAG,CAAC;AACd;AAEA,SAAS/B,oBAAoBA,CAAC2C,GAAG,EAAE;EACjC,IAAA1C,kBAAS,EAAC0C,GAAG,CAACzC,MAAM,IAAI,CAAC,EAAE,0CAA0C,CAAC;EAEtE,KAAK,IAAI6B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGY,GAAG,CAACzC,MAAM,EAAE,EAAE6B,CAAC,EAAE;IACnC,IAAA9B,kBAAS,EAAC0C,GAAG,CAACZ,CAAC,CAAC,IAAIY,GAAG,CAACZ,CAAC,GAAG,CAAC,CAAC,EAO9B,kDAAkD,GAAGY,GAAG,CAAC;EAC3D;AACF;AAEA,SAAS7C,kBAAkBA,CAAC+C,IAAI,EAAEF,GAAG,EAAE;EACrC,IAAA1C,kBAAS,EAAC0C,GAAG,CAACzC,MAAM,IAAI,CAAC,EAAE2C,IAAI,GAAG,gCAAgC,CAAC;EACnE,IAAA5C,kBAAS,EAAC0C,GAAG,CAACzC,MAAM,KAAK,CAAC,IAAIyC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC3B,QAAQ,IAAI2B,GAAG,CAAC,CAAC,CAAC,KAAK3B,QAAQ,EAOzE6B,IAAI,GAAG,kCAAkC,GAAGF,GAAG,CAAC;AAClD;AAAC,IAEKG,qBAAqB,aAAAC,qBAAA;EAAA,IAAAxF,UAAA,CAAAJ,OAAA,EAAA2F,qBAAA,EAAAC,qBAAA;EAAA,IAAAC,MAAA,GAAAhF,YAAA,CAAA8E,qBAAA;EAEzB,SAAAA,sBAAYG,MAAM,EAAEtD,MAAM,EAAE;IAAA,IAAAuD,KAAA;IAAA,IAAA9F,gBAAA,CAAAD,OAAA,QAAA2F,qBAAA;IAC1BI,KAAA,GAAAF,MAAA,CAAA9D,IAAA;IACAgE,KAAA,CAAKC,OAAO,GAAGF,MAAM;IACrBC,KAAA,CAAKE,OAAO,GAAGzD,MAAM;IACrBuD,KAAA,CAAKG,cAAc,GAAG3D,mBAAmB,CAACC,MAAM,CAAC;IAAC,OAAAuD,KAAA;EACpD;EAAC,IAAA7F,aAAA,CAAAF,OAAA,EAAA2F,qBAAA;IAAAQ,GAAA;IAAApG,KAAA,EAED,SAAAqG,aAAA,EAAe;MACb,IAAI,CAACJ,OAAO,CAACI,YAAY,CAAC,CAAC;MAE3B,IAAAjG,KAAA,CAAAH,OAAA,MAAAM,gBAAA,CAAAN,OAAA,EAAA2F,qBAAA,CAAA9D,SAAA,yBAAAE,IAAA;IACF;EAAC;IAAAoE,GAAA;IAAApG,KAAA,EAED,SAAAsG,WAAA,EAAa;MACX,IAAIC,WAAW,GAAG,IAAI,CAACN,OAAO,CAACK,UAAU,CAAC,CAAC;MAE3C,IAAAvD,kBAAS,EAAC,OAAOwD,WAAW,KAAK,QAAQ,EAAE,oDAAoD,CAAC;MAChG,OAAO,IAAI,CAACJ,cAAc,CAACI,WAAW,CAAC;IACzC;EAAC;IAAAH,GAAA;IAAApG,KAAA,EAED,SAAAyD,YAAYhB,MAAM,EAAE;MAClB,OAAO,IAAImD,qBAAqB,CAAC,IAAI,EAAEnD,MAAM,CAAC;IAChD;EAAC;IAAA2D,GAAA;IAAApG,KAAA,EAED,SAAAwG,SAAA,EAAW;MACT,IAAI,CAACP,OAAO,CAACQ,UAAU,CAAC,IAAI,CAAC;IAC/B;EAAC;IAAAL,GAAA;IAAApG,KAAA,EAED,SAAA0G,SAAA,EAAW;MACT,IAAI,CAACT,OAAO,CAACU,aAAa,CAAC,IAAI,CAAC;MAEhC,IAAAvG,KAAA,CAAAH,OAAA,MAAAM,gBAAA,CAAAN,OAAA,EAAA2F,qBAAA,CAAA9D,SAAA,qBAAAE,IAAA;IACF;EAAC;IAAAoE,GAAA;IAAApG,KAAA,EAED,SAAA4G,oBAAoBrD,KAAK,EAAE;MACzB,OAAOA,KAAK,CAACgB,GAAG,CAACsC,6BAAoB,CAACC,iBAAiB,CAAC;IAC1D;EAAC;IAAAV,GAAA;IAAApG,KAAA,EAED,SAAA+G,kBAAA,EAAoB;MAClB,IAAI7E,OAAO,EAAE;QACX2E,6BAAoB,CAACG,qBAAqB,CAAC,IAAI,CAACd,OAAO,CAAC;MAC1D;MAEA,OAAO;QACLrD,UAAU,EAAE,IAAI,CAACqD,OAAO,CAACrD,UAAU;QAKnCH,WAAW,EAAE,IAAI,CAACkE,mBAAmB,CAAC,IAAI,CAACV,OAAO,CAACxD,WAAW,CAAC;QAC/DQ,eAAe,EAAE,IAAI,CAACgD,OAAO,CAAChD,eAAe,IAAI,IAAI,CAACgD,OAAO,CAAC9C,WAAW,IAAI,QAAQ;QACrFC,gBAAgB,EAAE,IAAI,CAAC6C,OAAO,CAAC7C,gBAAgB,IAAI,IAAI,CAAC6C,OAAO,CAAC9C,WAAW,IAAI,QAAQ;QACvF6D,IAAI,EAAE;MACR,CAAC;IACH;EAAC;EAAA,OAAArB,qBAAA;AAAA,EAxDiCsB,8BAAoB;AA4DxDtB,qBAAqB,CAACuB,qBAAqB,GAAG3E,mBAAmB;AAAC,IAAA4E,QAAA,GAAArH,OAAA,CAAAE,OAAA,GACnD2F,qBAAqB"},"metadata":{},"sourceType":"script","externalDependencies":[]}