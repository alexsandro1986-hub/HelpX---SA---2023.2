{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.ToggleButton = void 0;\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _color = _interopRequireDefault(require(\"color\"));\nvar _ToggleButtonGroup = require(\"./ToggleButtonGroup\");\nvar _utils = require(\"./utils\");\nvar _theming = require(\"../../core/theming\");\nvar _colors = require(\"../../styles/themes/v2/colors\");\nvar _forwardRef = require(\"../../utils/forwardRef\");\nvar _IconButton = _interopRequireDefault(require(\"../IconButton/IconButton\"));\nvar _excluded = [\"icon\", \"size\", \"theme\", \"accessibilityLabel\", \"disabled\", \"style\", \"value\", \"status\", \"onPress\", \"rippleColor\"];\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar ToggleButton = exports.ToggleButton = (0, _forwardRef.forwardRef)(function (_ref, ref) {\n  var icon = _ref.icon,\n    size = _ref.size,\n    themeOverrides = _ref.theme,\n    accessibilityLabel = _ref.accessibilityLabel,\n    disabled = _ref.disabled,\n    style = _ref.style,\n    value = _ref.value,\n    status = _ref.status,\n    _onPress = _ref.onPress,\n    rippleColor = _ref.rippleColor,\n    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var theme = (0, _theming.useInternalTheme)(themeOverrides);\n  var borderRadius = theme.roundness;\n  return React.createElement(_ToggleButtonGroup.ToggleButtonGroupContext.Consumer, null, function (context) {\n    var checked = context && context.value === value || status === 'checked';\n    var backgroundColor = (0, _utils.getToggleButtonColor)({\n      theme: theme,\n      checked: checked\n    });\n    var borderColor = theme.isV3 ? theme.colors.outline : (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.29).rgb().string();\n    return React.createElement(_IconButton.default, _extends({\n      borderless: false,\n      icon: icon,\n      onPress: function onPress(e) {\n        if (_onPress) {\n          _onPress(e);\n        }\n        if (context) {\n          context.onValueChange(!checked ? value : null);\n        }\n      },\n      size: size,\n      accessibilityLabel: accessibilityLabel,\n      accessibilityState: {\n        disabled: disabled,\n        selected: checked\n      },\n      disabled: disabled,\n      style: [styles.content, {\n        backgroundColor: backgroundColor,\n        borderRadius: borderRadius,\n        borderColor: borderColor\n      }, style],\n      ref: ref,\n      theme: theme,\n      rippleColor: rippleColor\n    }, rest));\n  });\n});\nvar styles = _reactNative.StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0\n  }\n});\nvar _default = exports.default = ToggleButton;","map":{"version":3,"names":["React","_interopRequireWildcard","require","_reactNative","_color","_interopRequireDefault","_ToggleButtonGroup","_utils","_theming","_colors","_forwardRef","_IconButton","_excluded","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","ToggleButton","exports","forwardRef","_ref","ref","icon","size","themeOverrides","theme","accessibilityLabel","disabled","style","value","status","onPress","rippleColor","rest","_objectWithoutProperties2","useInternalTheme","borderRadius","roundness","createElement","ToggleButtonGroupContext","Consumer","context","checked","backgroundColor","getToggleButtonColor","borderColor","isV3","colors","outline","color","dark","white","black","alpha","rgb","string","IconButton","_extends","borderless","e","onValueChange","accessibilityState","selected","styles","content","StyleSheet","create","width","height","margin","_default"],"sources":["C:\\Users\\erick_ribeiro-souza\\Desktop\\s.a 2\\sa.ReactNative2semestre-1\\node_modules\\react-native-paper\\src\\components\\ToggleButton\\ToggleButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  ViewStyle,\n  View,\n  Animated,\n  ColorValue,\n} from 'react-native';\n\nimport color from 'color';\n\nimport { ToggleButtonGroupContext } from './ToggleButtonGroup';\nimport { getToggleButtonColor } from './utils';\nimport { useInternalTheme } from '../../core/theming';\nimport { black, white } from '../../styles/themes/v2/colors';\nimport type { ThemeProp } from '../../types';\nimport { forwardRef } from '../../utils/forwardRef';\nimport type { IconSource } from '../Icon';\nimport IconButton from '../IconButton/IconButton';\n\nexport type Props = {\n  /**\n   * Icon to display for the `ToggleButton`.\n   */\n  icon: IconSource;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Custom text color for button.\n   */\n  iconColor?: string;\n  /**\n   * Color of the ripple effect.\n   */\n  rippleColor?: ColorValue;\n  /**\n   * Whether the button is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the `ToggleButton`. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (value?: GestureResponderEvent | string) => void;\n  /**\n   * Value of button.\n   */\n  value?: string;\n  /**\n   * Status of button.\n   */\n  status?: 'checked' | 'unchecked';\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n  ref?: React.RefObject<View>;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * Toggle buttons can be used to group related options. To emphasize groups of related toggle buttons,\n * a group should share a common container.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const ToggleButtonExample = () => {\n *   const [status, setStatus] = React.useState('checked');\n *\n *   const onButtonToggle = value => {\n *     setStatus(status === 'checked' ? 'unchecked' : 'checked');\n *   };\n *\n *   return (\n *     <ToggleButton\n *       icon=\"bluetooth\"\n *       value=\"bluetooth\"\n *       status={status}\n *       onPress={onButtonToggle}\n *     />\n *   );\n * };\n *\n * export default ToggleButtonExample;\n *\n * ```\n */\nconst ToggleButton = forwardRef<View, Props>(\n  (\n    {\n      icon,\n      size,\n      theme: themeOverrides,\n      accessibilityLabel,\n      disabled,\n      style,\n      value,\n      status,\n      onPress,\n      rippleColor,\n      ...rest\n    }: Props,\n    ref\n  ) => {\n    const theme = useInternalTheme(themeOverrides);\n    const borderRadius = theme.roundness;\n\n    return (\n      <ToggleButtonGroupContext.Consumer>\n        {(\n          context: { value: string | null; onValueChange: Function } | null\n        ) => {\n          const checked: boolean | null =\n            (context && context.value === value) || status === 'checked';\n\n          const backgroundColor = getToggleButtonColor({ theme, checked });\n          const borderColor = theme.isV3\n            ? theme.colors.outline\n            : color(theme.dark ? white : black)\n                .alpha(0.29)\n                .rgb()\n                .string();\n\n          return (\n            <IconButton\n              borderless={false}\n              icon={icon}\n              onPress={(e?: GestureResponderEvent | string) => {\n                if (onPress) {\n                  onPress(e);\n                }\n\n                if (context) {\n                  context.onValueChange(!checked ? value : null);\n                }\n              }}\n              size={size}\n              accessibilityLabel={accessibilityLabel}\n              accessibilityState={{ disabled, selected: checked }}\n              disabled={disabled}\n              style={[\n                styles.content,\n                {\n                  backgroundColor,\n                  borderRadius,\n                  borderColor,\n                },\n                style,\n              ]}\n              ref={ref}\n              theme={theme}\n              rippleColor={rippleColor}\n              {...rest}\n            />\n          );\n        }}\n      </ToggleButtonGroupContext.Consumer>\n    );\n  }\n);\n\nconst styles = StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0,\n  },\n});\n\nexport default ToggleButton;\n\n// @component-docs ignore-next-line\nexport { ToggleButton };\n"],"mappings":";;;;;;AAAA,IAAAA,KAAA,GAAAC,uBAAA,CAAAC,OAAA;AACA,IAAAC,YAAA,GAAAD,OAAA;AAUA,IAAAE,MAAA,GAAAC,sBAAA,CAAAH,OAAA;AAEA,IAAAI,kBAAA,GAAAJ,OAAA;AACA,IAAAK,MAAA,GAAAL,OAAA;AACA,IAAAM,QAAA,GAAAN,OAAA;AACA,IAAAO,OAAA,GAAAP,OAAA;AAEA,IAAAQ,WAAA,GAAAR,OAAA;AAEA,IAAAS,WAAA,GAAAN,sBAAA,CAAAH,OAAA;AAAiD,IAAAU,SAAA;AAAA,SAAAC,yBAAAC,WAAA,eAAAC,OAAA,kCAAAC,iBAAA,OAAAD,OAAA,QAAAE,gBAAA,OAAAF,OAAA,YAAAF,wBAAA,YAAAA,yBAAAC,WAAA,WAAAA,WAAA,GAAAG,gBAAA,GAAAD,iBAAA,KAAAF,WAAA;AAAA,SAAAb,wBAAAiB,GAAA,EAAAJ,WAAA,SAAAA,WAAA,IAAAI,GAAA,IAAAA,GAAA,CAAAC,UAAA,WAAAD,GAAA,QAAAA,GAAA,oBAAAA,GAAA,wBAAAA,GAAA,4BAAAE,OAAA,EAAAF,GAAA,UAAAG,KAAA,GAAAR,wBAAA,CAAAC,WAAA,OAAAO,KAAA,IAAAA,KAAA,CAAAC,GAAA,CAAAJ,GAAA,YAAAG,KAAA,CAAAE,GAAA,CAAAL,GAAA,SAAAM,MAAA,WAAAC,qBAAA,GAAAC,MAAA,CAAAC,cAAA,IAAAD,MAAA,CAAAE,wBAAA,WAAAC,GAAA,IAAAX,GAAA,QAAAW,GAAA,kBAAAH,MAAA,CAAAI,SAAA,CAAAC,cAAA,CAAAC,IAAA,CAAAd,GAAA,EAAAW,GAAA,SAAAI,IAAA,GAAAR,qBAAA,GAAAC,MAAA,CAAAE,wBAAA,CAAAV,GAAA,EAAAW,GAAA,cAAAI,IAAA,KAAAA,IAAA,CAAAV,GAAA,IAAAU,IAAA,CAAAC,GAAA,KAAAR,MAAA,CAAAC,cAAA,CAAAH,MAAA,EAAAK,GAAA,EAAAI,IAAA,YAAAT,MAAA,CAAAK,GAAA,IAAAX,GAAA,CAAAW,GAAA,SAAAL,MAAA,CAAAJ,OAAA,GAAAF,GAAA,MAAAG,KAAA,IAAAA,KAAA,CAAAa,GAAA,CAAAhB,GAAA,EAAAM,MAAA,YAAAA,MAAA;;;;;;;;;;;;;;;AAiFjD,IAAMW,YAAY,GAAAC,OAAA,CAAAD,YAAA,GAAG,IAAAE,sBAAU,EAC7B,UAAAC,IAAA,EAcEC,GAAG,EACA;EAAA,IAbDC,IAAI,GAWEF,IAAA,CAXNE,IAAI;IACJC,IAAI,GAUEH,IAAA,CAVNG,IAAI;IACGC,cAAc,GASfJ,IAAA,CATNK,KAAK;IACLC,kBAAkB,GAQZN,IAAA,CARNM,kBAAkB;IAClBC,QAAQ,GAOFP,IAAA,CAPNO,QAAQ;IACRC,KAAK,GAMCR,IAAA,CANNQ,KAAK;IACLC,KAAK,GAKCT,IAAA,CALNS,KAAK;IACLC,MAAM,GAIAV,IAAA,CAJNU,MAAM;IACNC,QAAO,GAGDX,IAAA,CAHNW,OAAO;IACPC,WAAW,GAELZ,IAAA,CAFNY,WAAW;IACRC,IAAA,OAAAC,yBAAA,CAAAhC,OAAA,EACGkB,IAAA,EAAA1B,SAAA;EAGR,IAAM+B,KAAK,GAAG,IAAAU,yBAAgB,EAACX,cAAc,CAAC;EAC9C,IAAMY,YAAY,GAAGX,KAAK,CAACY,SAAS;EAEpC,OACEvD,KAAA,CAAAwD,aAAA,CAACC,2CAAwB,CAACC,QAAQ,QAE9B,UAAAC,OAAiE,EAC9D;IACH,IAAMC,OAAuB,GAC1BD,OAAO,IAAIA,OAAO,CAACZ,KAAK,KAAKA,KAAK,IAAKC,MAAM,KAAK,SAAS;IAE9D,IAAMa,eAAe,GAAG,IAAAC,2BAAoB,EAAC;MAAEnB,KAAK,EAALA,KAAK;MAAEiB,OAAA,EAAAA;IAAQ,CAAC,CAAC;IAChE,IAAMG,WAAW,GAAGpB,KAAK,CAACqB,IAAI,GAC1BrB,KAAK,CAACsB,MAAM,CAACC,OAAO,GACpB,IAAAC,cAAK,EAACxB,KAAK,CAACyB,IAAI,GAAGC,aAAK,GAAGC,aAAK,CAAC,CAC9BC,KAAK,CAAC,IAAI,CAAC,CACXC,GAAG,CAAC,CAAC,CACLC,MAAM,CAAC,CAAC;IAEf,OACEzE,KAAA,CAAAwD,aAAA,CAACkB,mBAAU,EAAAC,QAAA;MACTC,UAAU,EAAE,KAAM;MAClBpC,IAAI,EAAEA,IAAK;MACXS,OAAO,EAAG,SAAAA,QAAA4B,CAAkC,EAAK;QAC/C,IAAI5B,QAAO,EAAE;UACXA,QAAO,CAAC4B,CAAC,CAAC;QACZ;QAEA,IAAIlB,OAAO,EAAE;UACXA,OAAO,CAACmB,aAAa,CAAC,CAAClB,OAAO,GAAGb,KAAK,GAAG,IAAI,CAAC;QAChD;MACF,CAAE;MACFN,IAAI,EAAEA,IAAK;MACXG,kBAAkB,EAAEA,kBAAmB;MACvCmC,kBAAkB,EAAE;QAAElC,QAAQ,EAARA,QAAQ;QAAEmC,QAAQ,EAAEpB;MAAQ,CAAE;MACpDf,QAAQ,EAAEA,QAAS;MACnBC,KAAK,EAAE,CACLmC,MAAM,CAACC,OAAO,EACd;QACErB,eAAe,EAAfA,eAAe;QACfP,YAAY,EAAZA,YAAY;QACZS,WAAA,EAAAA;MACF,CAAC,EACDjB,KAAK,CACL;MACFP,GAAG,EAAEA,GAAI;MACTI,KAAK,EAAEA,KAAM;MACbO,WAAW,EAAEA;IAAY,GACrBC,IAAI,CACT,CAAC;EAEN,CACiC,CAAC;AAExC,CACF,CAAC;AAED,IAAM8B,MAAM,GAAGE,uBAAU,CAACC,MAAM,CAAC;EAC/BF,OAAO,EAAE;IACPG,KAAK,EAAE,EAAE;IACTC,MAAM,EAAE,EAAE;IACVC,MAAM,EAAE;EACV;AACF,CAAC,CAAC;AAAA,IAAAC,QAAA,GAAApD,OAAA,CAAAhB,OAAA,GAEae,YAAY"},"metadata":{},"sourceType":"script","externalDependencies":[]}