{"ast":null,"code":"'use strict';\n\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport RNCCameraRoll from \"./nativeInterface\";\nvar invariant = require('fbjs/lib/invariant');\nvar GROUP_TYPES_OPTIONS = {\n  Album: 'Album',\n  All: 'All',\n  Event: 'Event',\n  Faces: 'Faces',\n  Library: 'Library',\n  PhotoStream: 'PhotoStream',\n  SavedPhotos: 'SavedPhotos'\n};\nvar ASSET_TYPE_OPTIONS = {\n  All: 'All',\n  Videos: 'Videos',\n  Photos: 'Photos'\n};\nvar CameraRoll = function () {\n  function CameraRoll() {\n    _classCallCheck(this, CameraRoll);\n  }\n  _createClass(CameraRoll, null, [{\n    key: \"saveImageWithTag\",\n    value: function saveImageWithTag(tag) {\n      console.warn('`CameraRoll.saveImageWithTag()` is deprecated. Use `CameraRoll.saveToCameraRoll()` instead.');\n      return this.saveToCameraRoll(tag, 'photo');\n    }\n  }, {\n    key: \"deletePhotos\",\n    value: function deletePhotos(photoUris) {\n      return RNCCameraRoll.deletePhotos(photoUris);\n    }\n  }, {\n    key: \"save\",\n    value: function save(tag) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _options$type = options.type,\n        type = _options$type === void 0 ? 'auto' : _options$type,\n        _options$album = options.album,\n        album = _options$album === void 0 ? '' : _options$album;\n      invariant(typeof tag === 'string', 'CameraRoll.saveToCameraRoll must be a valid string.');\n      invariant(options.type === 'photo' || options.type === 'video' || options.type === 'auto' || options.type === undefined, \"The second argument to saveToCameraRoll must be 'photo' or 'video' or 'auto'. You passed \" + (type || 'unknown'));\n      if (type === 'auto') {\n        if (['mov', 'mp4'].indexOf(tag.split('.').slice(-1)[0]) >= 0) {\n          type = 'video';\n        } else {\n          type = 'photo';\n        }\n      }\n      return RNCCameraRoll.saveToCameraRoll(tag, {\n        type: type,\n        album: album\n      });\n    }\n  }, {\n    key: \"saveToCameraRoll\",\n    value: function saveToCameraRoll(tag, type) {\n      console.warn('CameraRoll.saveToCameraRoll(tag, type) is deprecated.  Use the save function instead');\n      return CameraRoll.save(tag, {\n        type: type\n      });\n    }\n  }, {\n    key: \"getAlbums\",\n    value: function getAlbums() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        assetType: ASSET_TYPE_OPTIONS.All\n      };\n      return RNCCameraRoll.getAlbums(params);\n    }\n  }, {\n    key: \"getParamsWithDefaults\",\n    value: function getParamsWithDefaults(params) {\n      var newParams = _objectSpread({}, params);\n      if (!newParams.assetType) {\n        newParams.assetType = ASSET_TYPE_OPTIONS.All;\n      }\n      if (!newParams.groupTypes && Platform.OS !== 'android') {\n        newParams.groupTypes = GROUP_TYPES_OPTIONS.All;\n      }\n      return newParams;\n    }\n  }, {\n    key: \"getPhotos\",\n    value: function getPhotos(params) {\n      params = CameraRoll.getParamsWithDefaults(params);\n      var promise = RNCCameraRoll.getPhotos(params);\n      if (arguments.length > 1) {\n        console.warn('CameraRoll.getPhotos(tag, success, error) is deprecated.  Use the returned Promise instead');\n        var successCallback = arguments[1];\n        var errorCallback = arguments[2] || function () {};\n        promise.then(successCallback, errorCallback);\n      }\n      return promise;\n    }\n  }]);\n  return CameraRoll;\n}();\nCameraRoll.GroupTypesOptions = GROUP_TYPES_OPTIONS;\nCameraRoll.AssetTypeOptions = ASSET_TYPE_OPTIONS;\nmodule.exports = CameraRoll;","map":{"version":3,"names":["_defineProperty","_classCallCheck","_createClass","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","Platform","RNCCameraRoll","invariant","require","GROUP_TYPES_OPTIONS","Album","All","Event","Faces","Library","PhotoStream","SavedPhotos","ASSET_TYPE_OPTIONS","Videos","Photos","CameraRoll","value","saveImageWithTag","tag","console","warn","saveToCameraRoll","deletePhotos","photoUris","save","options","undefined","_options$type","type","_options$album","album","indexOf","split","slice","getAlbums","params","assetType","getParamsWithDefaults","newParams","groupTypes","OS","getPhotos","promise","successCallback","errorCallback","then","GroupTypesOptions","AssetTypeOptions","module","exports"],"sources":["C:/Users/erick_ribeiro-souza/Desktop/s.a 2/sa.ReactNative2semestre-1/node_modules/@react-native-community/cameraroll/js/CameraRoll.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\nimport {Platform} from 'react-native';\nimport RNCCameraRoll from './nativeInterface';\n\nconst invariant = require('fbjs/lib/invariant');\n\nconst GROUP_TYPES_OPTIONS = {\n  Album: 'Album',\n  All: 'All', // default\n  Event: 'Event',\n  Faces: 'Faces',\n  Library: 'Library',\n  PhotoStream: 'PhotoStream',\n  SavedPhotos: 'SavedPhotos',\n};\n\nconst ASSET_TYPE_OPTIONS = {\n  All: 'All',\n  Videos: 'Videos',\n  Photos: 'Photos',\n};\n\nexport type GroupTypes = $Keys<typeof GROUP_TYPES_OPTIONS>;\n\nexport type Include =\n  | 'filename'\n  | 'fileSize'\n  | 'location'\n  | 'imageSize'\n  | 'playableDuration';\n\n/**\n * Shape of the param arg for the `getPhotos` function.\n */\nexport type GetPhotosParams = {\n  /**\n   * The number of photos wanted in reverse order of the photo application\n   * (i.e. most recent first).\n   */\n  first: number,\n\n  /**\n   * A cursor that matches `page_info { end_cursor }` returned from a previous\n   * call to `getPhotos`\n   */\n  after?: string,\n\n  /**\n   * Specifies which group types to filter the results to.\n   */\n  groupTypes?: GroupTypes,\n\n  /**\n   * Specifies filter on group names, like 'Recent Photos' or custom album\n   * titles.\n   */\n  groupName?: string,\n\n  /**\n   * Specifies filter on asset type\n   */\n  assetType?: $Keys<typeof ASSET_TYPE_OPTIONS>,\n\n  /**\n   * Earliest time to get photos from. A timestamp in milliseconds. Exclusive.\n   */\n  fromTime?: number,\n\n  /**\n   * Latest time to get photos from. A timestamp in milliseconds. Inclusive.\n   */\n  toTime?: Number,\n\n  /**\n   * Filter by mimetype (e.g. image/jpeg).\n   */\n  mimeTypes?: Array<string>,\n\n  /**\n   * Specific fields in the output that we want to include, even though they\n   * might have some performance impact.\n   */\n  include?: Include[],\n};\n\nexport type PhotoIdentifier = {\n  node: {\n    type: string,\n    group_name: string,\n    image: {\n      filename: string | null,\n      uri: string,\n      height: number,\n      width: number,\n      fileSize: number | null,\n      playableDuration: number,\n    },\n    timestamp: number,\n    location: {\n      latitude?: number,\n      longitude?: number,\n      altitude?: number,\n      heading?: number,\n      speed?: number,\n    } | null,\n  },\n};\n\nexport type PhotoIdentifiersPage = {\n  edges: Array<PhotoIdentifier>,\n  page_info: {\n    has_next_page: boolean,\n    start_cursor?: string,\n    end_cursor?: string,\n  },\n  limited?: boolean,\n};\n\nexport type SaveToCameraRollOptions = {\n  type?: 'photo' | 'video' | 'auto',\n  album?: string,\n};\n\nexport type GetAlbumsParams = {\n  assetType?: $Keys<typeof ASSET_TYPE_OPTIONS>,\n};\n\nexport type Album = {\n  title: string,\n  count: number,\n};\n\n/**\n * `CameraRoll` provides access to the local camera roll or photo library.\n *\n * See https://facebook.github.io/react-native/docs/cameraroll.html\n */\nclass CameraRoll {\n  static GroupTypesOptions = GROUP_TYPES_OPTIONS;\n  static AssetTypeOptions = ASSET_TYPE_OPTIONS;\n\n  /**\n   * `CameraRoll.saveImageWithTag()` is deprecated. Use `CameraRoll.saveToCameraRoll()` instead.\n   */\n  static saveImageWithTag(tag: string): Promise<string> {\n    console.warn(\n      '`CameraRoll.saveImageWithTag()` is deprecated. Use `CameraRoll.saveToCameraRoll()` instead.',\n    );\n    return this.saveToCameraRoll(tag, 'photo');\n  }\n\n  /**\n   * On iOS: requests deletion of a set of photos from the camera roll.\n   * On Android: Deletes a set of photos from the camera roll.\n   *\n   */\n  static deletePhotos(photoUris: Array<string>) {\n    return RNCCameraRoll.deletePhotos(photoUris);\n  }\n\n  /**\n   * Saves the photo or video to the camera roll or photo library.\n   *\n   */\n  static save(\n    tag: string,\n    options: SaveToCameraRollOptions = {},\n  ): Promise<string> {\n    let {type = 'auto', album = ''} = options;\n    invariant(\n      typeof tag === 'string',\n      'CameraRoll.saveToCameraRoll must be a valid string.',\n    );\n    invariant(\n      options.type === 'photo' ||\n        options.type === 'video' ||\n        options.type === 'auto' ||\n        options.type === undefined,\n      `The second argument to saveToCameraRoll must be 'photo' or 'video' or 'auto'. You passed ${type ||\n        'unknown'}`,\n    );\n    if (type === 'auto') {\n      if (['mov', 'mp4'].indexOf(tag.split('.').slice(-1)[0]) >= 0) {\n        type = 'video';\n      } else {\n        type = 'photo';\n      }\n    }\n    return RNCCameraRoll.saveToCameraRoll(tag, {type, album});\n  }\n  static saveToCameraRoll(\n    tag: string,\n    type?: 'photo' | 'video' | 'auto',\n  ): Promise<string> {\n    console.warn(\n      'CameraRoll.saveToCameraRoll(tag, type) is deprecated.  Use the save function instead',\n    );\n    return CameraRoll.save(tag, {type});\n  }\n  static getAlbums(\n    params?: GetAlbumsParams = {assetType: ASSET_TYPE_OPTIONS.All},\n  ): Promise<Album[]> {\n    return RNCCameraRoll.getAlbums(params);\n  }\n\n  static getParamsWithDefaults(params: GetPhotosParams): GetPhotosParams {\n    const newParams = {...params};\n    if (!newParams.assetType) {\n      newParams.assetType = ASSET_TYPE_OPTIONS.All;\n    }\n    if (!newParams.groupTypes && Platform.OS !== 'android') {\n      newParams.groupTypes = GROUP_TYPES_OPTIONS.All;\n    }\n    return newParams;\n  }\n\n  /**\n   * Returns a Promise with photo identifier objects from the local camera\n   * roll of the device matching shape defined by `getPhotosReturnChecker`.\n   *\n   * See https://facebook.github.io/react-native/docs/cameraroll.html#getphotos\n   */\n  static getPhotos(params: GetPhotosParams): Promise<PhotoIdentifiersPage> {\n    params = CameraRoll.getParamsWithDefaults(params);\n    const promise = RNCCameraRoll.getPhotos(params);\n\n    if (arguments.length > 1) {\n      console.warn(\n        'CameraRoll.getPhotos(tag, success, error) is deprecated.  Use the returned Promise instead',\n      );\n      let successCallback = arguments[1];\n      const errorCallback = arguments[2] || (() => {});\n      promise.then(successCallback, errorCallback);\n    }\n\n    return promise;\n  }\n}\n\nmodule.exports = CameraRoll;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}