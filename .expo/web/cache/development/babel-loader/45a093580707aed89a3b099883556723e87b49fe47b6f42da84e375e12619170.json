{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fontFamilyNeedsScoping = fontFamilyNeedsScoping;\nexports.getAssetForSource = getAssetForSource;\nexports.getNativeFontName = getNativeFontName;\nexports.loadSingleFontAsync = loadSingleFontAsync;\nvar _expoAsset = require(\"expo-asset\");\nvar _expoModulesCore = require(\"expo-modules-core\");\nvar _ExpoFontLoader = _interopRequireDefault(require(\"./ExpoFontLoader\"));\nvar _Font = require(\"./Font.types\");\nfunction uriFromFontSource(asset) {\n  if (typeof asset === 'string') {\n    return asset || null;\n  } else if (typeof asset === 'object') {\n    return asset.uri || asset.localUri || asset.default || null;\n  } else if (typeof asset === 'number') {\n    return uriFromFontSource(_expoAsset.Asset.fromModule(asset));\n  }\n  return null;\n}\nfunction displayFromFontSource(asset) {\n  return asset.display || _Font.FontDisplay.AUTO;\n}\nfunction fontFamilyNeedsScoping(name) {\n  return false;\n}\nfunction getAssetForSource(source) {\n  var uri = uriFromFontSource(source);\n  var display = displayFromFontSource(source);\n  if (!uri || typeof uri !== 'string') {\n    throwInvalidSourceError(uri);\n  }\n  return {\n    uri: uri,\n    display: display\n  };\n}\nfunction throwInvalidSourceError(source) {\n  var type = typeof source;\n  if (type === 'object') type = JSON.stringify(source, null, 2);\n  throw new _expoModulesCore.CodedError(\"ERR_FONT_SOURCE\", \"Expected font asset of type `string | FontResource | Asset` instead got: \" + type);\n}\nfunction loadSingleFontAsync(name, input) {\n  if (typeof input !== 'object' || typeof input.uri !== 'string' || input.downloadAsync) {\n    throwInvalidSourceError(input);\n  }\n  try {\n    return _ExpoFontLoader.default.loadAsync(name, input);\n  } catch (_unused) {}\n  return Promise.resolve();\n}\nfunction getNativeFontName(name) {\n  return name;\n}","map":{"version":3,"names":["_expoAsset","require","_expoModulesCore","_ExpoFontLoader","_interopRequireDefault","_Font","uriFromFontSource","asset","uri","localUri","default","Asset","fromModule","displayFromFontSource","display","FontDisplay","AUTO","fontFamilyNeedsScoping","name","getAssetForSource","source","throwInvalidSourceError","type","JSON","stringify","CodedError","loadSingleFontAsync","input","downloadAsync","ExpoFontLoader","loadAsync","_unused","Promise","resolve","getNativeFontName"],"sources":["C:\\Users\\erick_ribeiro-souza\\Desktop\\s.a 2\\sa.ReactNative2semestre-1\\node_modules\\expo-font\\src\\FontLoader.web.ts"],"sourcesContent":["import { Asset } from 'expo-asset';\nimport { CodedError } from 'expo-modules-core';\n\nimport ExpoFontLoader from './ExpoFontLoader';\nimport { FontResource, FontSource, FontDisplay } from './Font.types';\n\nfunction uriFromFontSource(asset: any): string | null {\n  if (typeof asset === 'string') {\n    return asset || null;\n  } else if (typeof asset === 'object') {\n    return asset.uri || asset.localUri || asset.default || null;\n  } else if (typeof asset === 'number') {\n    return uriFromFontSource(Asset.fromModule(asset));\n  }\n  return null;\n}\n\nfunction displayFromFontSource(asset: any): FontDisplay | undefined {\n  return asset.display || FontDisplay.AUTO;\n}\n\nexport function fontFamilyNeedsScoping(name: string): boolean {\n  return false;\n}\n\nexport function getAssetForSource(source: FontSource): Asset | FontResource {\n  const uri = uriFromFontSource(source);\n  const display = displayFromFontSource(source);\n\n  if (!uri || typeof uri !== 'string') {\n    throwInvalidSourceError(uri);\n  }\n\n  return {\n    uri: uri!,\n    display,\n  };\n}\n\nfunction throwInvalidSourceError(source: any): never {\n  let type: string = typeof source;\n  if (type === 'object') type = JSON.stringify(source, null, 2);\n  throw new CodedError(\n    `ERR_FONT_SOURCE`,\n    `Expected font asset of type \\`string | FontResource | Asset\\` instead got: ${type}`\n  );\n}\n\n// NOTE(EvanBacon): No async keyword!\nexport function loadSingleFontAsync(name: string, input: Asset | FontResource): Promise<void> {\n  if (typeof input !== 'object' || typeof input.uri !== 'string' || (input as any).downloadAsync) {\n    throwInvalidSourceError(input);\n  }\n\n  try {\n    return ExpoFontLoader.loadAsync(name, input);\n  } catch {\n    // No-op.\n  }\n\n  return Promise.resolve();\n}\n\nexport function getNativeFontName(name: string): string {\n  return name;\n}\n"],"mappings":";;;;;;;;AAAA,IAAAA,UAAA,GAAAC,OAAA;AACA,IAAAC,gBAAA,GAAAD,OAAA;AAEA,IAAAE,eAAA,GAAAC,sBAAA,CAAAH,OAAA;AACA,IAAAI,KAAA,GAAAJ,OAAA;AAEA,SAASK,iBAAiBA,CAACC,KAAU;EACnC,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC7B,OAAOA,KAAK,IAAI,IAAI;GACrB,MAAM,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IACpC,OAAOA,KAAK,CAACC,GAAG,IAAID,KAAK,CAACE,QAAQ,IAAIF,KAAK,CAACG,OAAO,IAAI,IAAI;GAC5D,MAAM,IAAI,OAAOH,KAAK,KAAK,QAAQ,EAAE;IACpC,OAAOD,iBAAiB,CAACK,gBAAK,CAACC,UAAU,CAACL,KAAK,CAAC,CAAC;;EAEnD,OAAO,IAAI;AACb;AAEA,SAASM,qBAAqBA,CAACN,KAAU;EACvC,OAAOA,KAAK,CAACO,OAAO,IAAIC,iBAAW,CAACC,IAAI;AAC1C;AAEM,SAAUC,sBAAsBA,CAACC,IAAY;EACjD,OAAO,KAAK;AACd;AAEM,SAAUC,iBAAiBA,CAACC,MAAkB;EAClD,IAAMZ,GAAG,GAAGF,iBAAiB,CAACc,MAAM,CAAC;EACrC,IAAMN,OAAO,GAAGD,qBAAqB,CAACO,MAAM,CAAC;EAE7C,IAAI,CAACZ,GAAG,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;IACnCa,uBAAuB,CAACb,GAAG,CAAC;;EAG9B,OAAO;IACLA,GAAG,EAAEA,GAAI;IACTM,OAAO,EAAPA;GACD;AACH;AAEA,SAASO,uBAAuBA,CAACD,MAAW;EAC1C,IAAIE,IAAI,GAAW,OAAOF,MAAM;EAChC,IAAIE,IAAI,KAAK,QAAQ,EAAEA,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACJ,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;EAC7D,MAAM,IAAIK,2BAAU,kGAE4DH,IAAM,CACrF;AACH;AAGM,SAAUI,mBAAmBA,CAACR,IAAY,EAAES,KAA2B;EAC3E,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAI,OAAOA,KAAK,CAACnB,GAAG,KAAK,QAAQ,IAAKmB,KAAa,CAACC,aAAa,EAAE;IAC9FP,uBAAuB,CAACM,KAAK,CAAC;;EAGhC,IAAI;IACF,OAAOE,uBAAc,CAACC,SAAS,CAACZ,IAAI,EAAES,KAAK,CAAC;GAC7C,CAAC,OAAAI,OAAA,EAAM,C;EAIR,OAAOC,OAAO,CAACC,OAAO,EAAE;AAC1B;AAEM,SAAUC,iBAAiBA,CAAChB,IAAY;EAC5C,OAAOA,IAAI;AACb"},"metadata":{},"sourceType":"script","externalDependencies":[]}