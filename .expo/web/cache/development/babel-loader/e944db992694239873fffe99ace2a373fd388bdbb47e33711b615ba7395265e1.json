{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar formatToList = function formatToList(items) {\n  return items.map(function (key) {\n    return \"- \" + key;\n  }).join('\\n');\n};\nexport default function validatePathConfig(config) {\n  var root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var validKeys = ['initialRouteName', 'screens'];\n  if (!root) {\n    validKeys.push('path', 'exact', 'stringify', 'parse');\n  }\n  var invalidKeys = Object.keys(config).filter(function (key) {\n    return !validKeys.includes(key);\n  });\n  if (invalidKeys.length) {\n    throw new Error(\"Found invalid properties in the configuration:\\n\" + formatToList(invalidKeys) + \"\\n\\nDid you forget to specify them under a 'screens' property?\\n\\nYou can only specify the following properties:\\n\" + formatToList(validKeys) + \"\\n\\nSee https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\");\n  }\n  if (config.screens) {\n    Object.entries(config.screens).forEach(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n        _ = _ref2[0],\n        value = _ref2[1];\n      if (typeof value !== 'string') {\n        validatePathConfig(value, false);\n      }\n    });\n  }\n}","map":{"version":3,"names":["formatToList","items","map","key","join","validatePathConfig","config","root","arguments","length","undefined","validKeys","push","invalidKeys","Object","keys","filter","includes","Error","screens","entries","forEach","_ref","_ref2","_slicedToArray","_","value"],"sources":["C:/Users/gisele_anjos/Documents/sa.ReactNative2semestre/node_modules/@react-navigation/core/lib/module/validatePathConfig.js"],"sourcesContent":["const formatToList = items => items.map(key => `- ${key}`).join('\\n');\nexport default function validatePathConfig(config) {\n  let root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  const validKeys = ['initialRouteName', 'screens'];\n  if (!root) {\n    validKeys.push('path', 'exact', 'stringify', 'parse');\n  }\n  const invalidKeys = Object.keys(config).filter(key => !validKeys.includes(key));\n  if (invalidKeys.length) {\n    throw new Error(`Found invalid properties in the configuration:\\n${formatToList(invalidKeys)}\\n\\nDid you forget to specify them under a 'screens' property?\\n\\nYou can only specify the following properties:\\n${formatToList(validKeys)}\\n\\nSee https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.`);\n  }\n  if (config.screens) {\n    Object.entries(config.screens).forEach(_ref => {\n      let [_, value] = _ref;\n      if (typeof value !== 'string') {\n        validatePathConfig(value, false);\n      }\n    });\n  }\n}\n//# sourceMappingURL=validatePathConfig.js.map"],"mappings":";AAAA,IAAMA,YAAY,GAAG,SAAfA,YAAYA,CAAGC,KAAK;EAAA,OAAIA,KAAK,CAACC,GAAG,CAAC,UAAAC,GAAG;IAAA,cAASA,GAAG;EAAA,CAAE,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;AAAA;AACrE,eAAe,SAASC,kBAAkBA,CAACC,MAAM,EAAE;EACjD,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI;EACnF,IAAMG,SAAS,GAAG,CAAC,kBAAkB,EAAE,SAAS,CAAC;EACjD,IAAI,CAACJ,IAAI,EAAE;IACTI,SAAS,CAACC,IAAI,CAAC,MAAM,EAAE,OAAO,EAAE,WAAW,EAAE,OAAO,CAAC;EACvD;EACA,IAAMC,WAAW,GAAGC,MAAM,CAACC,IAAI,CAACT,MAAM,CAAC,CAACU,MAAM,CAAC,UAAAb,GAAG;IAAA,OAAI,CAACQ,SAAS,CAACM,QAAQ,CAACd,GAAG,CAAC;EAAA,EAAC;EAC/E,IAAIU,WAAW,CAACJ,MAAM,EAAE;IACtB,MAAM,IAAIS,KAAK,sDAAoDlB,YAAY,CAACa,WAAW,CAAC,0HAAqHb,YAAY,CAACW,SAAS,CAAC,2HAAwH,CAAC;EACnW;EACA,IAAIL,MAAM,CAACa,OAAO,EAAE;IAClBL,MAAM,CAACM,OAAO,CAACd,MAAM,CAACa,OAAO,CAAC,CAACE,OAAO,CAAC,UAAAC,IAAI,EAAI;MAC7C,IAAAC,KAAA,GAAAC,cAAA,CAAiBF,IAAI;QAAhBG,CAAC,GAAAF,KAAA;QAAEG,KAAK,GAAAH,KAAA;MACb,IAAI,OAAOG,KAAK,KAAK,QAAQ,EAAE;QAC7BrB,kBAAkB,CAACqB,KAAK,EAAE,KAAK,CAAC;MAClC;IACF,CAAC,CAAC;EACJ;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}